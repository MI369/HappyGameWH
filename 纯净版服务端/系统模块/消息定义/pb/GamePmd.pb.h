// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePmd.proto

#ifndef PROTOBUF_GamePmd_2eproto__INCLUDED
#define PROTOBUF_GamePmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NullPmd.pb.h"
#include "CommonPmd.pb.h"
// @@protoc_insertion_point(includes)
namespace CommonPmd {
class SYSTEMTIME;
class SYSTEMTIMEDefaultTypeInternal;
extern SYSTEMTIMEDefaultTypeInternal _SYSTEMTIME_default_instance_;
class consumptionType;
class consumptionTypeDefaultTypeInternal;
extern consumptionTypeDefaultTypeInternal _consumptionType_default_instance_;
class personinfo;
class personinfoDefaultTypeInternal;
extern personinfoDefaultTypeInternal _personinfo_default_instance_;
}  // namespace CommonPmd
namespace GamePmd {
class personalParameter_c2s;
class personalParameter_c2sDefaultTypeInternal;
extern personalParameter_c2sDefaultTypeInternal _personalParameter_c2s_default_instance_;
class tagGameNode;
class tagGameNodeDefaultTypeInternal;
extern tagGameNodeDefaultTypeInternal _tagGameNode_default_instance_;
class tagGameNode_s2c;
class tagGameNode_s2cDefaultTypeInternal;
extern tagGameNode_s2cDefaultTypeInternal _tagGameNode_s2c_default_instance_;
class tagGamePage;
class tagGamePageDefaultTypeInternal;
extern tagGamePageDefaultTypeInternal _tagGamePage_default_instance_;
class tagGamePage_s2c;
class tagGamePage_s2cDefaultTypeInternal;
extern tagGamePage_s2cDefaultTypeInternal _tagGamePage_s2c_default_instance_;
class tagGameServer;
class tagGameServerDefaultTypeInternal;
extern tagGameServerDefaultTypeInternal _tagGameServer_default_instance_;
class tagGameServer_s2c;
class tagGameServer_s2cDefaultTypeInternal;
extern tagGameServer_s2cDefaultTypeInternal _tagGameServer_s2c_default_instance_;
class tagGetPersonalRule_s2c;
class tagGetPersonalRule_s2cDefaultTypeInternal;
extern tagGetPersonalRule_s2cDefaultTypeInternal _tagGetPersonalRule_s2c_default_instance_;
class tagPersonalCellScore_s2c;
class tagPersonalCellScore_s2cDefaultTypeInternal;
extern tagPersonalCellScore_s2cDefaultTypeInternal _tagPersonalCellScore_s2c_default_instance_;
class tagPersonalRoomOption_s2c;
class tagPersonalRoomOption_s2cDefaultTypeInternal;
extern tagPersonalRoomOption_s2cDefaultTypeInternal _tagPersonalRoomOption_s2c_default_instance_;
class tagPersonalTableFeeList;
class tagPersonalTableFeeListDefaultTypeInternal;
extern tagPersonalTableFeeListDefaultTypeInternal _tagPersonalTableFeeList_default_instance_;
class tagPersonalTableFeeList_s2c;
class tagPersonalTableFeeList_s2cDefaultTypeInternal;
extern tagPersonalTableFeeList_s2cDefaultTypeInternal _tagPersonalTableFeeList_s2c_default_instance_;
class taggamekind;
class taggamekindDefaultTypeInternal;
extern taggamekindDefaultTypeInternal _taggamekind_default_instance_;
class taggamekind_s2c;
class taggamekind_s2cDefaultTypeInternal;
extern taggamekind_s2cDefaultTypeInternal _taggamekind_s2c_default_instance_;
class taggametype;
class taggametypeDefaultTypeInternal;
extern taggametypeDefaultTypeInternal _taggametype_default_instance_;
class taggametype_s2c;
class taggametype_s2cDefaultTypeInternal;
extern taggametype_s2cDefaultTypeInternal _taggametype_s2c_default_instance_;
}  // namespace GamePmd
namespace NullPmd {
class command;
class commandDefaultTypeInternal;
extern commandDefaultTypeInternal _command_default_instance_;
class head;
class headDefaultTypeInternal;
extern headDefaultTypeInternal _head_default_instance_;
class indication;
class indicationDefaultTypeInternal;
extern indicationDefaultTypeInternal _indication_default_instance_;
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
class message;
class messageDefaultTypeInternal;
extern messageDefaultTypeInternal _message_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace NullPmd

namespace GamePmd {

namespace protobuf_GamePmd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_GamePmd_2eproto

// ===================================================================

class taggametype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.taggametype) */ {
 public:
  taggametype();
  virtual ~taggametype();

  taggametype(const taggametype& from);

  inline taggametype& operator=(const taggametype& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taggametype& default_instance();

  static inline const taggametype* internal_default_instance() {
    return reinterpret_cast<const taggametype*>(
               &_taggametype_default_instance_);
  }

  void Swap(taggametype* other);

  // implements Message ----------------------------------------------

  inline taggametype* New() const PROTOBUF_FINAL { return New(NULL); }

  taggametype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const taggametype& from);
  void MergeFrom(const taggametype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(taggametype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sztypename = 4;
  void clear_sztypename();
  static const int kSztypenameFieldNumber = 4;
  const ::std::string& sztypename() const;
  void set_sztypename(const ::std::string& value);
  #if LANG_CXX11
  void set_sztypename(::std::string&& value);
  #endif
  void set_sztypename(const char* value);
  void set_sztypename(const char* value, size_t size);
  ::std::string* mutable_sztypename();
  ::std::string* release_sztypename();
  void set_allocated_sztypename(::std::string* sztypename);

  // int32 wjoinid = 1;
  void clear_wjoinid();
  static const int kWjoinidFieldNumber = 1;
  ::google::protobuf::int32 wjoinid() const;
  void set_wjoinid(::google::protobuf::int32 value);

  // int32 wsortid = 2;
  void clear_wsortid();
  static const int kWsortidFieldNumber = 2;
  ::google::protobuf::int32 wsortid() const;
  void set_wsortid(::google::protobuf::int32 value);

  // int32 wtypeid = 3;
  void clear_wtypeid();
  static const int kWtypeidFieldNumber = 3;
  ::google::protobuf::int32 wtypeid() const;
  void set_wtypeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.taggametype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sztypename_;
  ::google::protobuf::int32 wjoinid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wtypeid_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class taggamekind : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.taggamekind) */ {
 public:
  taggamekind();
  virtual ~taggamekind();

  taggamekind(const taggamekind& from);

  inline taggamekind& operator=(const taggamekind& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taggamekind& default_instance();

  static inline const taggamekind* internal_default_instance() {
    return reinterpret_cast<const taggamekind*>(
               &_taggamekind_default_instance_);
  }

  void Swap(taggamekind* other);

  // implements Message ----------------------------------------------

  inline taggamekind* New() const PROTOBUF_FINAL { return New(NULL); }

  taggamekind* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const taggamekind& from);
  void MergeFrom(const taggamekind& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(taggamekind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szkindname = 12;
  void clear_szkindname();
  static const int kSzkindnameFieldNumber = 12;
  const ::std::string& szkindname() const;
  void set_szkindname(const ::std::string& value);
  #if LANG_CXX11
  void set_szkindname(::std::string&& value);
  #endif
  void set_szkindname(const char* value);
  void set_szkindname(const char* value, size_t size);
  ::std::string* mutable_szkindname();
  ::std::string* release_szkindname();
  void set_allocated_szkindname(::std::string* szkindname);

  // string szprocessname = 13;
  void clear_szprocessname();
  static const int kSzprocessnameFieldNumber = 13;
  const ::std::string& szprocessname() const;
  void set_szprocessname(const ::std::string& value);
  #if LANG_CXX11
  void set_szprocessname(::std::string&& value);
  #endif
  void set_szprocessname(const char* value);
  void set_szprocessname(const char* value, size_t size);
  ::std::string* mutable_szprocessname();
  ::std::string* release_szprocessname();
  void set_allocated_szprocessname(::std::string* szprocessname);

  // int32 wtypeid = 1;
  void clear_wtypeid();
  static const int kWtypeidFieldNumber = 1;
  ::google::protobuf::int32 wtypeid() const;
  void set_wtypeid(::google::protobuf::int32 value);

  // int32 wjoinid = 2;
  void clear_wjoinid();
  static const int kWjoinidFieldNumber = 2;
  ::google::protobuf::int32 wjoinid() const;
  void set_wjoinid(::google::protobuf::int32 value);

  // int32 wsortid = 3;
  void clear_wsortid();
  static const int kWsortidFieldNumber = 3;
  ::google::protobuf::int32 wsortid() const;
  void set_wsortid(::google::protobuf::int32 value);

  // int32 wkindid = 4;
  void clear_wkindid();
  static const int kWkindidFieldNumber = 4;
  ::google::protobuf::int32 wkindid() const;
  void set_wkindid(::google::protobuf::int32 value);

  // int32 wgameid = 5;
  void clear_wgameid();
  static const int kWgameidFieldNumber = 5;
  ::google::protobuf::int32 wgameid() const;
  void set_wgameid(::google::protobuf::int32 value);

  // int32 wrecommend = 6;
  void clear_wrecommend();
  static const int kWrecommendFieldNumber = 6;
  ::google::protobuf::int32 wrecommend() const;
  void set_wrecommend(::google::protobuf::int32 value);

  // uint64 dwonlinecount = 8;
  void clear_dwonlinecount();
  static const int kDwonlinecountFieldNumber = 8;
  ::google::protobuf::uint64 dwonlinecount() const;
  void set_dwonlinecount(::google::protobuf::uint64 value);

  // uint64 dwandroidcount = 9;
  void clear_dwandroidcount();
  static const int kDwandroidcountFieldNumber = 9;
  ::google::protobuf::uint64 dwandroidcount() const;
  void set_dwandroidcount(::google::protobuf::uint64 value);

  // uint64 dwsetcount = 10;
  void clear_dwsetcount();
  static const int kDwsetcountFieldNumber = 10;
  ::google::protobuf::uint64 dwsetcount() const;
  void set_dwsetcount(::google::protobuf::uint64 value);

  // uint64 dwfullcount = 11;
  void clear_dwfullcount();
  static const int kDwfullcountFieldNumber = 11;
  ::google::protobuf::uint64 dwfullcount() const;
  void set_dwfullcount(::google::protobuf::uint64 value);

  // int32 wgameflag = 7;
  void clear_wgameflag();
  static const int kWgameflagFieldNumber = 7;
  ::google::protobuf::int32 wgameflag() const;
  void set_wgameflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.taggamekind)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szkindname_;
  ::google::protobuf::internal::ArenaStringPtr szprocessname_;
  ::google::protobuf::int32 wtypeid_;
  ::google::protobuf::int32 wjoinid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wgameid_;
  ::google::protobuf::int32 wrecommend_;
  ::google::protobuf::uint64 dwonlinecount_;
  ::google::protobuf::uint64 dwandroidcount_;
  ::google::protobuf::uint64 dwsetcount_;
  ::google::protobuf::uint64 dwfullcount_;
  ::google::protobuf::int32 wgameflag_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGameNode) */ {
 public:
  tagGameNode();
  virtual ~tagGameNode();

  tagGameNode(const tagGameNode& from);

  inline tagGameNode& operator=(const tagGameNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameNode& default_instance();

  static inline const tagGameNode* internal_default_instance() {
    return reinterpret_cast<const tagGameNode*>(
               &_tagGameNode_default_instance_);
  }

  void Swap(tagGameNode* other);

  // implements Message ----------------------------------------------

  inline tagGameNode* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameNode& from);
  void MergeFrom(const tagGameNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sznodename = 5;
  void clear_sznodename();
  static const int kSznodenameFieldNumber = 5;
  const ::std::string& sznodename() const;
  void set_sznodename(const ::std::string& value);
  #if LANG_CXX11
  void set_sznodename(::std::string&& value);
  #endif
  void set_sznodename(const char* value);
  void set_sznodename(const char* value, size_t size);
  ::std::string* mutable_sznodename();
  ::std::string* release_sznodename();
  void set_allocated_sznodename(::std::string* sznodename);

  // int32 wkindid = 1;
  void clear_wkindid();
  static const int kWkindidFieldNumber = 1;
  ::google::protobuf::int32 wkindid() const;
  void set_wkindid(::google::protobuf::int32 value);

  // int32 wjoinid = 2;
  void clear_wjoinid();
  static const int kWjoinidFieldNumber = 2;
  ::google::protobuf::int32 wjoinid() const;
  void set_wjoinid(::google::protobuf::int32 value);

  // int32 wsortid = 3;
  void clear_wsortid();
  static const int kWsortidFieldNumber = 3;
  ::google::protobuf::int32 wsortid() const;
  void set_wsortid(::google::protobuf::int32 value);

  // int32 wnodeid = 4;
  void clear_wnodeid();
  static const int kWnodeidFieldNumber = 4;
  ::google::protobuf::int32 wnodeid() const;
  void set_wnodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGameNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sznodename_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wjoinid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wnodeid_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGamePage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGamePage) */ {
 public:
  tagGamePage();
  virtual ~tagGamePage();

  tagGamePage(const tagGamePage& from);

  inline tagGamePage& operator=(const tagGamePage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGamePage& default_instance();

  static inline const tagGamePage* internal_default_instance() {
    return reinterpret_cast<const tagGamePage*>(
               &_tagGamePage_default_instance_);
  }

  void Swap(tagGamePage* other);

  // implements Message ----------------------------------------------

  inline tagGamePage* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGamePage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGamePage& from);
  void MergeFrom(const tagGamePage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGamePage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szdisplayname = 6;
  void clear_szdisplayname();
  static const int kSzdisplaynameFieldNumber = 6;
  const ::std::string& szdisplayname() const;
  void set_szdisplayname(const ::std::string& value);
  #if LANG_CXX11
  void set_szdisplayname(::std::string&& value);
  #endif
  void set_szdisplayname(const char* value);
  void set_szdisplayname(const char* value, size_t size);
  ::std::string* mutable_szdisplayname();
  ::std::string* release_szdisplayname();
  void set_allocated_szdisplayname(::std::string* szdisplayname);

  // int32 wpageid = 1;
  void clear_wpageid();
  static const int kWpageidFieldNumber = 1;
  ::google::protobuf::int32 wpageid() const;
  void set_wpageid(::google::protobuf::int32 value);

  // int32 wkindid = 2;
  void clear_wkindid();
  static const int kWkindidFieldNumber = 2;
  ::google::protobuf::int32 wkindid() const;
  void set_wkindid(::google::protobuf::int32 value);

  // int32 wnodeid = 3;
  void clear_wnodeid();
  static const int kWnodeidFieldNumber = 3;
  ::google::protobuf::int32 wnodeid() const;
  void set_wnodeid(::google::protobuf::int32 value);

  // int32 wsortid = 4;
  void clear_wsortid();
  static const int kWsortidFieldNumber = 4;
  ::google::protobuf::int32 wsortid() const;
  void set_wsortid(::google::protobuf::int32 value);

  // int32 woperatetype = 5;
  void clear_woperatetype();
  static const int kWoperatetypeFieldNumber = 5;
  ::google::protobuf::int32 woperatetype() const;
  void set_woperatetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGamePage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szdisplayname_;
  ::google::protobuf::int32 wpageid_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wnodeid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 woperatetype_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGameServer) */ {
 public:
  tagGameServer();
  virtual ~tagGameServer();

  tagGameServer(const tagGameServer& from);

  inline tagGameServer& operator=(const tagGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameServer& default_instance();

  static inline const tagGameServer* internal_default_instance() {
    return reinterpret_cast<const tagGameServer*>(
               &_tagGameServer_default_instance_);
  }

  void Swap(tagGameServer* other);

  // implements Message ----------------------------------------------

  inline tagGameServer* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameServer& from);
  void MergeFrom(const tagGameServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szserveraddr = 16;
  void clear_szserveraddr();
  static const int kSzserveraddrFieldNumber = 16;
  const ::std::string& szserveraddr() const;
  void set_szserveraddr(const ::std::string& value);
  #if LANG_CXX11
  void set_szserveraddr(::std::string&& value);
  #endif
  void set_szserveraddr(const char* value);
  void set_szserveraddr(const char* value, size_t size);
  ::std::string* mutable_szserveraddr();
  ::std::string* release_szserveraddr();
  void set_allocated_szserveraddr(::std::string* szserveraddr);

  // string szservername = 17;
  void clear_szservername();
  static const int kSzservernameFieldNumber = 17;
  const ::std::string& szservername() const;
  void set_szservername(const ::std::string& value);
  #if LANG_CXX11
  void set_szservername(::std::string&& value);
  #endif
  void set_szservername(const char* value);
  void set_szservername(const char* value, size_t size);
  ::std::string* mutable_szservername();
  ::std::string* release_szservername();
  void set_allocated_szservername(::std::string* szservername);

  // string szgameinfomation = 21;
  void clear_szgameinfomation();
  static const int kSzgameinfomationFieldNumber = 21;
  const ::std::string& szgameinfomation() const;
  void set_szgameinfomation(const ::std::string& value);
  #if LANG_CXX11
  void set_szgameinfomation(::std::string&& value);
  #endif
  void set_szgameinfomation(const char* value);
  void set_szgameinfomation(const char* value, size_t size);
  ::std::string* mutable_szgameinfomation();
  ::std::string* release_szgameinfomation();
  void set_allocated_szgameinfomation(::std::string* szgameinfomation);

  // int32 wkindid = 1;
  void clear_wkindid();
  static const int kWkindidFieldNumber = 1;
  ::google::protobuf::int32 wkindid() const;
  void set_wkindid(::google::protobuf::int32 value);

  // int32 wnodeid = 2;
  void clear_wnodeid();
  static const int kWnodeidFieldNumber = 2;
  ::google::protobuf::int32 wnodeid() const;
  void set_wnodeid(::google::protobuf::int32 value);

  // int32 wsortid = 3;
  void clear_wsortid();
  static const int kWsortidFieldNumber = 3;
  ::google::protobuf::int32 wsortid() const;
  void set_wsortid(::google::protobuf::int32 value);

  // int32 wserverid = 4;
  void clear_wserverid();
  static const int kWserveridFieldNumber = 4;
  ::google::protobuf::int32 wserverid() const;
  void set_wserverid(::google::protobuf::int32 value);

  // int32 wserverkind = 5;
  void clear_wserverkind();
  static const int kWserverkindFieldNumber = 5;
  ::google::protobuf::int32 wserverkind() const;
  void set_wserverkind(::google::protobuf::int32 value);

  // int32 wservertype = 6;
  void clear_wservertype();
  static const int kWservertypeFieldNumber = 6;
  ::google::protobuf::int32 wservertype() const;
  void set_wservertype(::google::protobuf::int32 value);

  // int32 wserverlevel = 7;
  void clear_wserverlevel();
  static const int kWserverlevelFieldNumber = 7;
  ::google::protobuf::int32 wserverlevel() const;
  void set_wserverlevel(::google::protobuf::int32 value);

  // int32 wserverport = 8;
  void clear_wserverport();
  static const int kWserverportFieldNumber = 8;
  ::google::protobuf::int32 wserverport() const;
  void set_wserverport(::google::protobuf::int32 value);

  // uint64 lcellscore = 9;
  void clear_lcellscore();
  static const int kLcellscoreFieldNumber = 9;
  ::google::protobuf::uint64 lcellscore() const;
  void set_lcellscore(::google::protobuf::uint64 value);

  // uint64 lenterscore = 11;
  void clear_lenterscore();
  static const int kLenterscoreFieldNumber = 11;
  ::google::protobuf::uint64 lenterscore() const;
  void set_lenterscore(::google::protobuf::uint64 value);

  // uint64 dwserverrule = 12;
  void clear_dwserverrule();
  static const int kDwserverruleFieldNumber = 12;
  ::google::protobuf::uint64 dwserverrule() const;
  void set_dwserverrule(::google::protobuf::uint64 value);

  // uint64 dwonlinecount = 13;
  void clear_dwonlinecount();
  static const int kDwonlinecountFieldNumber = 13;
  ::google::protobuf::uint64 dwonlinecount() const;
  void set_dwonlinecount(::google::protobuf::uint64 value);

  // uint64 dwandroidcount = 14;
  void clear_dwandroidcount();
  static const int kDwandroidcountFieldNumber = 14;
  ::google::protobuf::uint64 dwandroidcount() const;
  void set_dwandroidcount(::google::protobuf::uint64 value);

  // int32 cbentermember = 10;
  void clear_cbentermember();
  static const int kCbentermemberFieldNumber = 10;
  ::google::protobuf::int32 cbentermember() const;
  void set_cbentermember(::google::protobuf::int32 value);

  // int32 wtablecount = 19;
  void clear_wtablecount();
  static const int kWtablecountFieldNumber = 19;
  ::google::protobuf::int32 wtablecount() const;
  void set_wtablecount(::google::protobuf::int32 value);

  // uint64 dwfullcount = 15;
  void clear_dwfullcount();
  static const int kDwfullcountFieldNumber = 15;
  ::google::protobuf::uint64 dwfullcount() const;
  void set_dwfullcount(::google::protobuf::uint64 value);

  // uint64 dwsurporttype = 18;
  void clear_dwsurporttype();
  static const int kDwsurporttypeFieldNumber = 18;
  ::google::protobuf::uint64 dwsurporttype() const;
  void set_dwsurporttype(::google::protobuf::uint64 value);

  // uint64 dwsetplayercount = 20;
  void clear_dwsetplayercount();
  static const int kDwsetplayercountFieldNumber = 20;
  ::google::protobuf::uint64 dwsetplayercount() const;
  void set_dwsetplayercount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szserveraddr_;
  ::google::protobuf::internal::ArenaStringPtr szservername_;
  ::google::protobuf::internal::ArenaStringPtr szgameinfomation_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wnodeid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wserverid_;
  ::google::protobuf::int32 wserverkind_;
  ::google::protobuf::int32 wservertype_;
  ::google::protobuf::int32 wserverlevel_;
  ::google::protobuf::int32 wserverport_;
  ::google::protobuf::uint64 lcellscore_;
  ::google::protobuf::uint64 lenterscore_;
  ::google::protobuf::uint64 dwserverrule_;
  ::google::protobuf::uint64 dwonlinecount_;
  ::google::protobuf::uint64 dwandroidcount_;
  ::google::protobuf::int32 cbentermember_;
  ::google::protobuf::int32 wtablecount_;
  ::google::protobuf::uint64 dwfullcount_;
  ::google::protobuf::uint64 dwsurporttype_;
  ::google::protobuf::uint64 dwsetplayercount_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class taggametype_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.taggametype_s2c) */ {
 public:
  taggametype_s2c();
  virtual ~taggametype_s2c();

  taggametype_s2c(const taggametype_s2c& from);

  inline taggametype_s2c& operator=(const taggametype_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taggametype_s2c& default_instance();

  static inline const taggametype_s2c* internal_default_instance() {
    return reinterpret_cast<const taggametype_s2c*>(
               &_taggametype_s2c_default_instance_);
  }

  void Swap(taggametype_s2c* other);

  // implements Message ----------------------------------------------

  inline taggametype_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  taggametype_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const taggametype_s2c& from);
  void MergeFrom(const taggametype_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(taggametype_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.taggametype taggametype = 3;
  int taggametype_size() const;
  void clear_taggametype();
  static const int kTaggametypeFieldNumber = 3;
  const ::GamePmd::taggametype& taggametype(int index) const;
  ::GamePmd::taggametype* mutable_taggametype(int index);
  ::GamePmd::taggametype* add_taggametype();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >*
      mutable_taggametype();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >&
      taggametype() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.taggametype_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype > taggametype_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class taggamekind_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.taggamekind_s2c) */ {
 public:
  taggamekind_s2c();
  virtual ~taggamekind_s2c();

  taggamekind_s2c(const taggamekind_s2c& from);

  inline taggamekind_s2c& operator=(const taggamekind_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taggamekind_s2c& default_instance();

  static inline const taggamekind_s2c* internal_default_instance() {
    return reinterpret_cast<const taggamekind_s2c*>(
               &_taggamekind_s2c_default_instance_);
  }

  void Swap(taggamekind_s2c* other);

  // implements Message ----------------------------------------------

  inline taggamekind_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  taggamekind_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const taggamekind_s2c& from);
  void MergeFrom(const taggamekind_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(taggamekind_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.taggamekind taggamekind = 2;
  int taggamekind_size() const;
  void clear_taggamekind();
  static const int kTaggamekindFieldNumber = 2;
  const ::GamePmd::taggamekind& taggamekind(int index) const;
  ::GamePmd::taggamekind* mutable_taggamekind(int index);
  ::GamePmd::taggamekind* add_taggamekind();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >*
      mutable_taggamekind();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >&
      taggamekind() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.taggamekind_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind > taggamekind_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGamePage_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGamePage_s2c) */ {
 public:
  tagGamePage_s2c();
  virtual ~tagGamePage_s2c();

  tagGamePage_s2c(const tagGamePage_s2c& from);

  inline tagGamePage_s2c& operator=(const tagGamePage_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGamePage_s2c& default_instance();

  static inline const tagGamePage_s2c* internal_default_instance() {
    return reinterpret_cast<const tagGamePage_s2c*>(
               &_tagGamePage_s2c_default_instance_);
  }

  void Swap(tagGamePage_s2c* other);

  // implements Message ----------------------------------------------

  inline tagGamePage_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGamePage_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGamePage_s2c& from);
  void MergeFrom(const tagGamePage_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGamePage_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  int taggamepage_size() const;
  void clear_taggamepage();
  static const int kTagGamePageFieldNumber = 2;
  const ::GamePmd::tagGamePage& taggamepage(int index) const;
  ::GamePmd::tagGamePage* mutable_taggamepage(int index);
  ::GamePmd::tagGamePage* add_taggamepage();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >*
      mutable_taggamepage();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >&
      taggamepage() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGamePage_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage > taggamepage_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameNode_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGameNode_s2c) */ {
 public:
  tagGameNode_s2c();
  virtual ~tagGameNode_s2c();

  tagGameNode_s2c(const tagGameNode_s2c& from);

  inline tagGameNode_s2c& operator=(const tagGameNode_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameNode_s2c& default_instance();

  static inline const tagGameNode_s2c* internal_default_instance() {
    return reinterpret_cast<const tagGameNode_s2c*>(
               &_tagGameNode_s2c_default_instance_);
  }

  void Swap(tagGameNode_s2c* other);

  // implements Message ----------------------------------------------

  inline tagGameNode_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameNode_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameNode_s2c& from);
  void MergeFrom(const tagGameNode_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameNode_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  int taggamenode_size() const;
  void clear_taggamenode();
  static const int kTagGameNodeFieldNumber = 2;
  const ::GamePmd::tagGameNode& taggamenode(int index) const;
  ::GamePmd::tagGameNode* mutable_taggamenode(int index);
  ::GamePmd::tagGameNode* add_taggamenode();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >*
      mutable_taggamenode();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >&
      taggamenode() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGameNode_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode > taggamenode_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameServer_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGameServer_s2c) */ {
 public:
  tagGameServer_s2c();
  virtual ~tagGameServer_s2c();

  tagGameServer_s2c(const tagGameServer_s2c& from);

  inline tagGameServer_s2c& operator=(const tagGameServer_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameServer_s2c& default_instance();

  static inline const tagGameServer_s2c* internal_default_instance() {
    return reinterpret_cast<const tagGameServer_s2c*>(
               &_tagGameServer_s2c_default_instance_);
  }

  void Swap(tagGameServer_s2c* other);

  // implements Message ----------------------------------------------

  inline tagGameServer_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameServer_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameServer_s2c& from);
  void MergeFrom(const tagGameServer_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameServer_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  int taggameserver_size() const;
  void clear_taggameserver();
  static const int kTagGameServerFieldNumber = 2;
  const ::GamePmd::tagGameServer& taggameserver(int index) const;
  ::GamePmd::tagGameServer* mutable_taggameserver(int index);
  ::GamePmd::tagGameServer* add_taggameserver();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >*
      mutable_taggameserver();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >&
      taggameserver() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGameServer_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer > taggameserver_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class personalParameter_c2s : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.personalParameter_c2s) */ {
 public:
  personalParameter_c2s();
  virtual ~personalParameter_c2s();

  personalParameter_c2s(const personalParameter_c2s& from);

  inline personalParameter_c2s& operator=(const personalParameter_c2s& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personalParameter_c2s& default_instance();

  static inline const personalParameter_c2s* internal_default_instance() {
    return reinterpret_cast<const personalParameter_c2s*>(
               &_personalParameter_c2s_default_instance_);
  }

  void Swap(personalParameter_c2s* other);

  // implements Message ----------------------------------------------

  inline personalParameter_c2s* New() const PROTOBUF_FINAL { return New(NULL); }

  personalParameter_c2s* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const personalParameter_c2s& from);
  void MergeFrom(const personalParameter_c2s& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(personalParameter_c2s* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // uint64 dwkindid = 2;
  void clear_dwkindid();
  static const int kDwkindidFieldNumber = 2;
  ::google::protobuf::uint64 dwkindid() const;
  void set_dwkindid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GamePmd.personalParameter_c2s)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NullPmd::response* respcmd_;
  ::google::protobuf::uint64 dwkindid_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPersonalTableFeeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagPersonalTableFeeList) */ {
 public:
  tagPersonalTableFeeList();
  virtual ~tagPersonalTableFeeList();

  tagPersonalTableFeeList(const tagPersonalTableFeeList& from);

  inline tagPersonalTableFeeList& operator=(const tagPersonalTableFeeList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPersonalTableFeeList& default_instance();

  static inline const tagPersonalTableFeeList* internal_default_instance() {
    return reinterpret_cast<const tagPersonalTableFeeList*>(
               &_tagPersonalTableFeeList_default_instance_);
  }

  void Swap(tagPersonalTableFeeList* other);

  // implements Message ----------------------------------------------

  inline tagPersonalTableFeeList* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPersonalTableFeeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPersonalTableFeeList& from);
  void MergeFrom(const tagPersonalTableFeeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPersonalTableFeeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 dwdrawtimelimit = 1;
  void clear_dwdrawtimelimit();
  static const int kDwdrawtimelimitFieldNumber = 1;
  ::google::protobuf::uint64 dwdrawtimelimit() const;
  void set_dwdrawtimelimit(::google::protobuf::uint64 value);

  // uint64 dwdrawcountlimit = 2;
  void clear_dwdrawcountlimit();
  static const int kDwdrawcountlimitFieldNumber = 2;
  ::google::protobuf::uint64 dwdrawcountlimit() const;
  void set_dwdrawcountlimit(::google::protobuf::uint64 value);

  // uint64 liniscore = 3;
  void clear_liniscore();
  static const int kLiniscoreFieldNumber = 3;
  ::google::protobuf::uint64 liniscore() const;
  void set_liniscore(::google::protobuf::uint64 value);

  // uint64 lfeescore = 4;
  void clear_lfeescore();
  static const int kLfeescoreFieldNumber = 4;
  ::google::protobuf::uint64 lfeescore() const;
  void set_lfeescore(::google::protobuf::uint64 value);

  // int32 waapayfee = 5;
  void clear_waapayfee();
  static const int kWaapayfeeFieldNumber = 5;
  ::google::protobuf::int32 waapayfee() const;
  void set_waapayfee(::google::protobuf::int32 value);

  // int32 cbgamemode = 6;
  void clear_cbgamemode();
  static const int kCbgamemodeFieldNumber = 6;
  ::google::protobuf::int32 cbgamemode() const;
  void set_cbgamemode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.tagPersonalTableFeeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 dwdrawtimelimit_;
  ::google::protobuf::uint64 dwdrawcountlimit_;
  ::google::protobuf::uint64 liniscore_;
  ::google::protobuf::uint64 lfeescore_;
  ::google::protobuf::int32 waapayfee_;
  ::google::protobuf::int32 cbgamemode_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPersonalTableFeeList_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagPersonalTableFeeList_s2c) */ {
 public:
  tagPersonalTableFeeList_s2c();
  virtual ~tagPersonalTableFeeList_s2c();

  tagPersonalTableFeeList_s2c(const tagPersonalTableFeeList_s2c& from);

  inline tagPersonalTableFeeList_s2c& operator=(const tagPersonalTableFeeList_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPersonalTableFeeList_s2c& default_instance();

  static inline const tagPersonalTableFeeList_s2c* internal_default_instance() {
    return reinterpret_cast<const tagPersonalTableFeeList_s2c*>(
               &_tagPersonalTableFeeList_s2c_default_instance_);
  }

  void Swap(tagPersonalTableFeeList_s2c* other);

  // implements Message ----------------------------------------------

  inline tagPersonalTableFeeList_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPersonalTableFeeList_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPersonalTableFeeList_s2c& from);
  void MergeFrom(const tagPersonalTableFeeList_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPersonalTableFeeList_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
  int tagpersonaltablefeelist_size() const;
  void clear_tagpersonaltablefeelist();
  static const int kTagPersonalTableFeeListFieldNumber = 2;
  const ::GamePmd::tagPersonalTableFeeList& tagpersonaltablefeelist(int index) const;
  ::GamePmd::tagPersonalTableFeeList* mutable_tagpersonaltablefeelist(int index);
  ::GamePmd::tagPersonalTableFeeList* add_tagpersonaltablefeelist();
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >*
      mutable_tagpersonaltablefeelist();
  const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >&
      tagpersonaltablefeelist() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagPersonalTableFeeList_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList > tagpersonaltablefeelist_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPersonalCellScore_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagPersonalCellScore_s2c) */ {
 public:
  tagPersonalCellScore_s2c();
  virtual ~tagPersonalCellScore_s2c();

  tagPersonalCellScore_s2c(const tagPersonalCellScore_s2c& from);

  inline tagPersonalCellScore_s2c& operator=(const tagPersonalCellScore_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPersonalCellScore_s2c& default_instance();

  static inline const tagPersonalCellScore_s2c* internal_default_instance() {
    return reinterpret_cast<const tagPersonalCellScore_s2c*>(
               &_tagPersonalCellScore_s2c_default_instance_);
  }

  void Swap(tagPersonalCellScore_s2c* other);

  // implements Message ----------------------------------------------

  inline tagPersonalCellScore_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPersonalCellScore_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPersonalCellScore_s2c& from);
  void MergeFrom(const tagPersonalCellScore_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPersonalCellScore_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ncellscore = 2;
  int ncellscore_size() const;
  void clear_ncellscore();
  static const int kNcellscoreFieldNumber = 2;
  ::google::protobuf::int32 ncellscore(int index) const;
  void set_ncellscore(int index, ::google::protobuf::int32 value);
  void add_ncellscore(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ncellscore() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ncellscore();

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagPersonalCellScore_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ncellscore_;
  mutable int _ncellscore_cached_byte_size_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGetPersonalRule_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagGetPersonalRule_s2c) */ {
 public:
  tagGetPersonalRule_s2c();
  virtual ~tagGetPersonalRule_s2c();

  tagGetPersonalRule_s2c(const tagGetPersonalRule_s2c& from);

  inline tagGetPersonalRule_s2c& operator=(const tagGetPersonalRule_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGetPersonalRule_s2c& default_instance();

  static inline const tagGetPersonalRule_s2c* internal_default_instance() {
    return reinterpret_cast<const tagGetPersonalRule_s2c*>(
               &_tagGetPersonalRule_s2c_default_instance_);
  }

  void Swap(tagGetPersonalRule_s2c* other);

  // implements Message ----------------------------------------------

  inline tagGetPersonalRule_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGetPersonalRule_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGetPersonalRule_s2c& from);
  void MergeFrom(const tagGetPersonalRule_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGetPersonalRule_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cbpersonalrule = 2;
  void clear_cbpersonalrule();
  static const int kCbpersonalruleFieldNumber = 2;
  const ::std::string& cbpersonalrule() const;
  void set_cbpersonalrule(const ::std::string& value);
  #if LANG_CXX11
  void set_cbpersonalrule(::std::string&& value);
  #endif
  void set_cbpersonalrule(const char* value);
  void set_cbpersonalrule(const char* value, size_t size);
  ::std::string* mutable_cbpersonalrule();
  ::std::string* release_cbpersonalrule();
  void set_allocated_cbpersonalrule(::std::string* cbpersonalrule);

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:GamePmd.tagGetPersonalRule_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cbpersonalrule_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPersonalRoomOption_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GamePmd.tagPersonalRoomOption_s2c) */ {
 public:
  tagPersonalRoomOption_s2c();
  virtual ~tagPersonalRoomOption_s2c();

  tagPersonalRoomOption_s2c(const tagPersonalRoomOption_s2c& from);

  inline tagPersonalRoomOption_s2c& operator=(const tagPersonalRoomOption_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPersonalRoomOption_s2c& default_instance();

  static inline const tagPersonalRoomOption_s2c* internal_default_instance() {
    return reinterpret_cast<const tagPersonalRoomOption_s2c*>(
               &_tagPersonalRoomOption_s2c_default_instance_);
  }

  void Swap(tagPersonalRoomOption_s2c* other);

  // implements Message ----------------------------------------------

  inline tagPersonalRoomOption_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPersonalRoomOption_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPersonalRoomOption_s2c& from);
  void MergeFrom(const tagPersonalRoomOption_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPersonalRoomOption_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // .CommonPmd.consumptionType bconsumptiontype = 7;
  bool has_bconsumptiontype() const;
  void clear_bconsumptiontype();
  static const int kBconsumptiontypeFieldNumber = 7;
  const ::CommonPmd::consumptionType& bconsumptiontype() const;
  ::CommonPmd::consumptionType* mutable_bconsumptiontype();
  ::CommonPmd::consumptionType* release_bconsumptiontype();
  void set_allocated_bconsumptiontype(::CommonPmd::consumptionType* bconsumptiontype);

  // int32 cbisjoingame = 2;
  void clear_cbisjoingame();
  static const int kCbisjoingameFieldNumber = 2;
  ::google::protobuf::int32 cbisjoingame() const;
  void set_cbisjoingame(::google::protobuf::int32 value);

  // int32 cbminpeople = 3;
  void clear_cbminpeople();
  static const int kCbminpeopleFieldNumber = 3;
  ::google::protobuf::int32 cbminpeople() const;
  void set_cbminpeople(::google::protobuf::int32 value);

  // uint64 lmaxcellscore = 5;
  void clear_lmaxcellscore();
  static const int kLmaxcellscoreFieldNumber = 5;
  ::google::protobuf::uint64 lmaxcellscore() const;
  void set_lmaxcellscore(::google::protobuf::uint64 value);

  // uint64 lpersonalroomtax = 6;
  void clear_lpersonalroomtax();
  static const int kLpersonalroomtaxFieldNumber = 6;
  ::google::protobuf::uint64 lpersonalroomtax() const;
  void set_lpersonalroomtax(::google::protobuf::uint64 value);

  // int32 cbmaxpeople = 4;
  void clear_cbmaxpeople();
  static const int kCbmaxpeopleFieldNumber = 4;
  ::google::protobuf::int32 cbmaxpeople() const;
  void set_cbmaxpeople(::google::protobuf::int32 value);

  // int32 wcancreatecount = 8;
  void clear_wcancreatecount();
  static const int kWcancreatecountFieldNumber = 8;
  ::google::protobuf::int32 wcancreatecount() const;
  void set_wcancreatecount(::google::protobuf::int32 value);

  // uint64 dwplayturncount = 9;
  void clear_dwplayturncount();
  static const int kDwplayturncountFieldNumber = 9;
  ::google::protobuf::uint64 dwplayturncount() const;
  void set_dwplayturncount(::google::protobuf::uint64 value);

  // uint64 dwplaytimelimit = 10;
  void clear_dwplaytimelimit();
  static const int kDwplaytimelimitFieldNumber = 10;
  ::google::protobuf::uint64 dwplaytimelimit() const;
  void set_dwplaytimelimit(::google::protobuf::uint64 value);

  // uint64 dwtimeafterbegincount = 11;
  void clear_dwtimeafterbegincount();
  static const int kDwtimeafterbegincountFieldNumber = 11;
  ::google::protobuf::uint64 dwtimeafterbegincount() const;
  void set_dwtimeafterbegincount(::google::protobuf::uint64 value);

  // uint64 dwtimeofflinecount = 12;
  void clear_dwtimeofflinecount();
  static const int kDwtimeofflinecountFieldNumber = 12;
  ::google::protobuf::uint64 dwtimeofflinecount() const;
  void set_dwtimeofflinecount(::google::protobuf::uint64 value);

  // uint64 dwtimenotbegingame = 13;
  void clear_dwtimenotbegingame();
  static const int kDwtimenotbegingameFieldNumber = 13;
  ::google::protobuf::uint64 dwtimenotbegingame() const;
  void set_dwtimenotbegingame(::google::protobuf::uint64 value);

  // uint64 dwtimeaftercreateroom = 14;
  void clear_dwtimeaftercreateroom();
  static const int kDwtimeaftercreateroomFieldNumber = 14;
  ::google::protobuf::uint64 dwtimeaftercreateroom() const;
  void set_dwtimeaftercreateroom(::google::protobuf::uint64 value);

  // int32 wbeginfreetime = 15;
  void clear_wbeginfreetime();
  static const int kWbeginfreetimeFieldNumber = 15;
  ::google::protobuf::int32 wbeginfreetime() const;
  void set_wbeginfreetime(::google::protobuf::int32 value);

  // int32 wendfreetime = 16;
  void clear_wendfreetime();
  static const int kWendfreetimeFieldNumber = 16;
  ::google::protobuf::int32 wendfreetime() const;
  void set_wendfreetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePmd.tagPersonalRoomOption_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NullPmd::response* respcmd_;
  ::CommonPmd::consumptionType* bconsumptiontype_;
  ::google::protobuf::int32 cbisjoingame_;
  ::google::protobuf::int32 cbminpeople_;
  ::google::protobuf::uint64 lmaxcellscore_;
  ::google::protobuf::uint64 lpersonalroomtax_;
  ::google::protobuf::int32 cbmaxpeople_;
  ::google::protobuf::int32 wcancreatecount_;
  ::google::protobuf::uint64 dwplayturncount_;
  ::google::protobuf::uint64 dwplaytimelimit_;
  ::google::protobuf::uint64 dwtimeafterbegincount_;
  ::google::protobuf::uint64 dwtimeofflinecount_;
  ::google::protobuf::uint64 dwtimenotbegingame_;
  ::google::protobuf::uint64 dwtimeaftercreateroom_;
  ::google::protobuf::int32 wbeginfreetime_;
  ::google::protobuf::int32 wendfreetime_;
  mutable int _cached_size_;
  friend struct  protobuf_GamePmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// taggametype

// int32 wjoinid = 1;
inline void taggametype::clear_wjoinid() {
  wjoinid_ = 0;
}
inline ::google::protobuf::int32 taggametype::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wjoinid)
  return wjoinid_;
}
inline void taggametype::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wjoinid)
}

// int32 wsortid = 2;
inline void taggametype::clear_wsortid() {
  wsortid_ = 0;
}
inline ::google::protobuf::int32 taggametype::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wsortid)
  return wsortid_;
}
inline void taggametype::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wsortid)
}

// int32 wtypeid = 3;
inline void taggametype::clear_wtypeid() {
  wtypeid_ = 0;
}
inline ::google::protobuf::int32 taggametype::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wtypeid)
  return wtypeid_;
}
inline void taggametype::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wtypeid)
}

// string sztypename = 4;
inline void taggametype::clear_sztypename() {
  sztypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taggametype::sztypename() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.sztypename)
  return sztypename_.GetNoArena();
}
inline void taggametype::set_sztypename(const ::std::string& value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.sztypename)
}
#if LANG_CXX11
inline void taggametype::set_sztypename(::std::string&& value) {
  
  sztypename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggametype.sztypename)
}
#endif
inline void taggametype::set_sztypename(const char* value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggametype.sztypename)
}
inline void taggametype::set_sztypename(const char* value, size_t size) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggametype.sztypename)
}
inline ::std::string* taggametype::mutable_sztypename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype.sztypename)
  return sztypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taggametype::release_sztypename() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype.sztypename)
  
  return sztypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taggametype::set_allocated_sztypename(::std::string* sztypename) {
  if (sztypename != NULL) {
    
  } else {
    
  }
  sztypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sztypename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype.sztypename)
}

// -------------------------------------------------------------------

// taggamekind

// int32 wtypeid = 1;
inline void taggamekind::clear_wtypeid() {
  wtypeid_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wtypeid)
  return wtypeid_;
}
inline void taggamekind::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wtypeid)
}

// int32 wjoinid = 2;
inline void taggamekind::clear_wjoinid() {
  wjoinid_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wjoinid)
  return wjoinid_;
}
inline void taggamekind::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wjoinid)
}

// int32 wsortid = 3;
inline void taggamekind::clear_wsortid() {
  wsortid_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wsortid)
  return wsortid_;
}
inline void taggamekind::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wsortid)
}

// int32 wkindid = 4;
inline void taggamekind::clear_wkindid() {
  wkindid_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wkindid)
  return wkindid_;
}
inline void taggamekind::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wkindid)
}

// int32 wgameid = 5;
inline void taggamekind::clear_wgameid() {
  wgameid_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wgameid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameid)
  return wgameid_;
}
inline void taggamekind::set_wgameid(::google::protobuf::int32 value) {
  
  wgameid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameid)
}

// int32 wrecommend = 6;
inline void taggamekind::clear_wrecommend() {
  wrecommend_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wrecommend() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wrecommend)
  return wrecommend_;
}
inline void taggamekind::set_wrecommend(::google::protobuf::int32 value) {
  
  wrecommend_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wrecommend)
}

// int32 wgameflag = 7;
inline void taggamekind::clear_wgameflag() {
  wgameflag_ = 0;
}
inline ::google::protobuf::int32 taggamekind::wgameflag() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameflag)
  return wgameflag_;
}
inline void taggamekind::set_wgameflag(::google::protobuf::int32 value) {
  
  wgameflag_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameflag)
}

// uint64 dwonlinecount = 8;
inline void taggamekind::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 taggamekind::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwonlinecount)
  return dwonlinecount_;
}
inline void taggamekind::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwonlinecount)
}

// uint64 dwandroidcount = 9;
inline void taggamekind::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 taggamekind::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwandroidcount)
  return dwandroidcount_;
}
inline void taggamekind::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwandroidcount)
}

// uint64 dwsetcount = 10;
inline void taggamekind::clear_dwsetcount() {
  dwsetcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 taggamekind::dwsetcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwsetcount)
  return dwsetcount_;
}
inline void taggamekind::set_dwsetcount(::google::protobuf::uint64 value) {
  
  dwsetcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwsetcount)
}

// uint64 dwfullcount = 11;
inline void taggamekind::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 taggamekind::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwfullcount)
  return dwfullcount_;
}
inline void taggamekind::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwfullcount)
}

// string szkindname = 12;
inline void taggamekind::clear_szkindname() {
  szkindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taggamekind::szkindname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szkindname)
  return szkindname_.GetNoArena();
}
inline void taggamekind::set_szkindname(const ::std::string& value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szkindname)
}
#if LANG_CXX11
inline void taggamekind::set_szkindname(::std::string&& value) {
  
  szkindname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szkindname)
}
#endif
inline void taggamekind::set_szkindname(const char* value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szkindname)
}
inline void taggamekind::set_szkindname(const char* value, size_t size) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szkindname)
}
inline ::std::string* taggamekind::mutable_szkindname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szkindname)
  return szkindname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taggamekind::release_szkindname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szkindname)
  
  return szkindname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taggamekind::set_allocated_szkindname(::std::string* szkindname) {
  if (szkindname != NULL) {
    
  } else {
    
  }
  szkindname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szkindname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szkindname)
}

// string szprocessname = 13;
inline void taggamekind::clear_szprocessname() {
  szprocessname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taggamekind::szprocessname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szprocessname)
  return szprocessname_.GetNoArena();
}
inline void taggamekind::set_szprocessname(const ::std::string& value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szprocessname)
}
#if LANG_CXX11
inline void taggamekind::set_szprocessname(::std::string&& value) {
  
  szprocessname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szprocessname)
}
#endif
inline void taggamekind::set_szprocessname(const char* value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szprocessname)
}
inline void taggamekind::set_szprocessname(const char* value, size_t size) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szprocessname)
}
inline ::std::string* taggamekind::mutable_szprocessname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szprocessname)
  return szprocessname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taggamekind::release_szprocessname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szprocessname)
  
  return szprocessname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taggamekind::set_allocated_szprocessname(::std::string* szprocessname) {
  if (szprocessname != NULL) {
    
  } else {
    
  }
  szprocessname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szprocessname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szprocessname)
}

// -------------------------------------------------------------------

// tagGameNode

// int32 wkindid = 1;
inline void tagGameNode::clear_wkindid() {
  wkindid_ = 0;
}
inline ::google::protobuf::int32 tagGameNode::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wkindid)
  return wkindid_;
}
inline void tagGameNode::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wkindid)
}

// int32 wjoinid = 2;
inline void tagGameNode::clear_wjoinid() {
  wjoinid_ = 0;
}
inline ::google::protobuf::int32 tagGameNode::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wjoinid)
  return wjoinid_;
}
inline void tagGameNode::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wjoinid)
}

// int32 wsortid = 3;
inline void tagGameNode::clear_wsortid() {
  wsortid_ = 0;
}
inline ::google::protobuf::int32 tagGameNode::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wsortid)
  return wsortid_;
}
inline void tagGameNode::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wsortid)
}

// int32 wnodeid = 4;
inline void tagGameNode::clear_wnodeid() {
  wnodeid_ = 0;
}
inline ::google::protobuf::int32 tagGameNode::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wnodeid)
  return wnodeid_;
}
inline void tagGameNode::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wnodeid)
}

// string sznodename = 5;
inline void tagGameNode::clear_sznodename() {
  sznodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameNode::sznodename() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.sznodename)
  return sznodename_.GetNoArena();
}
inline void tagGameNode::set_sznodename(const ::std::string& value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.sznodename)
}
#if LANG_CXX11
inline void tagGameNode::set_sznodename(::std::string&& value) {
  
  sznodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameNode.sznodename)
}
#endif
inline void tagGameNode::set_sznodename(const char* value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameNode.sznodename)
}
inline void tagGameNode::set_sznodename(const char* value, size_t size) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameNode.sznodename)
}
inline ::std::string* tagGameNode::mutable_sznodename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode.sznodename)
  return sznodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameNode::release_sznodename() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode.sznodename)
  
  return sznodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameNode::set_allocated_sznodename(::std::string* sznodename) {
  if (sznodename != NULL) {
    
  } else {
    
  }
  sznodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznodename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode.sznodename)
}

// -------------------------------------------------------------------

// tagGamePage

// int32 wpageid = 1;
inline void tagGamePage::clear_wpageid() {
  wpageid_ = 0;
}
inline ::google::protobuf::int32 tagGamePage::wpageid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wpageid)
  return wpageid_;
}
inline void tagGamePage::set_wpageid(::google::protobuf::int32 value) {
  
  wpageid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wpageid)
}

// int32 wkindid = 2;
inline void tagGamePage::clear_wkindid() {
  wkindid_ = 0;
}
inline ::google::protobuf::int32 tagGamePage::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wkindid)
  return wkindid_;
}
inline void tagGamePage::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wkindid)
}

// int32 wnodeid = 3;
inline void tagGamePage::clear_wnodeid() {
  wnodeid_ = 0;
}
inline ::google::protobuf::int32 tagGamePage::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wnodeid)
  return wnodeid_;
}
inline void tagGamePage::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wnodeid)
}

// int32 wsortid = 4;
inline void tagGamePage::clear_wsortid() {
  wsortid_ = 0;
}
inline ::google::protobuf::int32 tagGamePage::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wsortid)
  return wsortid_;
}
inline void tagGamePage::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wsortid)
}

// int32 woperatetype = 5;
inline void tagGamePage::clear_woperatetype() {
  woperatetype_ = 0;
}
inline ::google::protobuf::int32 tagGamePage::woperatetype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.woperatetype)
  return woperatetype_;
}
inline void tagGamePage::set_woperatetype(::google::protobuf::int32 value) {
  
  woperatetype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.woperatetype)
}

// string szdisplayname = 6;
inline void tagGamePage::clear_szdisplayname() {
  szdisplayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGamePage::szdisplayname() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.GetNoArena();
}
inline void tagGamePage::set_szdisplayname(const ::std::string& value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.szdisplayname)
}
#if LANG_CXX11
inline void tagGamePage::set_szdisplayname(::std::string&& value) {
  
  szdisplayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGamePage.szdisplayname)
}
#endif
inline void tagGamePage::set_szdisplayname(const char* value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGamePage.szdisplayname)
}
inline void tagGamePage::set_szdisplayname(const char* value, size_t size) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGamePage.szdisplayname)
}
inline ::std::string* tagGamePage::mutable_szdisplayname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGamePage::release_szdisplayname() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage.szdisplayname)
  
  return szdisplayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGamePage::set_allocated_szdisplayname(::std::string* szdisplayname) {
  if (szdisplayname != NULL) {
    
  } else {
    
  }
  szdisplayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdisplayname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage.szdisplayname)
}

// -------------------------------------------------------------------

// tagGameServer

// int32 wkindid = 1;
inline void tagGameServer::clear_wkindid() {
  wkindid_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wkindid)
  return wkindid_;
}
inline void tagGameServer::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wkindid)
}

// int32 wnodeid = 2;
inline void tagGameServer::clear_wnodeid() {
  wnodeid_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wnodeid)
  return wnodeid_;
}
inline void tagGameServer::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wnodeid)
}

// int32 wsortid = 3;
inline void tagGameServer::clear_wsortid() {
  wsortid_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wsortid)
  return wsortid_;
}
inline void tagGameServer::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wsortid)
}

// int32 wserverid = 4;
inline void tagGameServer::clear_wserverid() {
  wserverid_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wserverid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverid)
  return wserverid_;
}
inline void tagGameServer::set_wserverid(::google::protobuf::int32 value) {
  
  wserverid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverid)
}

// int32 wserverkind = 5;
inline void tagGameServer::clear_wserverkind() {
  wserverkind_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wserverkind() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverkind)
  return wserverkind_;
}
inline void tagGameServer::set_wserverkind(::google::protobuf::int32 value) {
  
  wserverkind_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverkind)
}

// int32 wservertype = 6;
inline void tagGameServer::clear_wservertype() {
  wservertype_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wservertype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wservertype)
  return wservertype_;
}
inline void tagGameServer::set_wservertype(::google::protobuf::int32 value) {
  
  wservertype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wservertype)
}

// int32 wserverlevel = 7;
inline void tagGameServer::clear_wserverlevel() {
  wserverlevel_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wserverlevel() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverlevel)
  return wserverlevel_;
}
inline void tagGameServer::set_wserverlevel(::google::protobuf::int32 value) {
  
  wserverlevel_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverlevel)
}

// int32 wserverport = 8;
inline void tagGameServer::clear_wserverport() {
  wserverport_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wserverport() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverport)
  return wserverport_;
}
inline void tagGameServer::set_wserverport(::google::protobuf::int32 value) {
  
  wserverport_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverport)
}

// uint64 lcellscore = 9;
inline void tagGameServer::clear_lcellscore() {
  lcellscore_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::lcellscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lcellscore)
  return lcellscore_;
}
inline void tagGameServer::set_lcellscore(::google::protobuf::uint64 value) {
  
  lcellscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lcellscore)
}

// int32 cbentermember = 10;
inline void tagGameServer::clear_cbentermember() {
  cbentermember_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::cbentermember() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.cbentermember)
  return cbentermember_;
}
inline void tagGameServer::set_cbentermember(::google::protobuf::int32 value) {
  
  cbentermember_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.cbentermember)
}

// uint64 lenterscore = 11;
inline void tagGameServer::clear_lenterscore() {
  lenterscore_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::lenterscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lenterscore)
  return lenterscore_;
}
inline void tagGameServer::set_lenterscore(::google::protobuf::uint64 value) {
  
  lenterscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lenterscore)
}

// uint64 dwserverrule = 12;
inline void tagGameServer::clear_dwserverrule() {
  dwserverrule_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwserverrule() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwserverrule)
  return dwserverrule_;
}
inline void tagGameServer::set_dwserverrule(::google::protobuf::uint64 value) {
  
  dwserverrule_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwserverrule)
}

// uint64 dwonlinecount = 13;
inline void tagGameServer::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwonlinecount)
  return dwonlinecount_;
}
inline void tagGameServer::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwonlinecount)
}

// uint64 dwandroidcount = 14;
inline void tagGameServer::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwandroidcount)
  return dwandroidcount_;
}
inline void tagGameServer::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwandroidcount)
}

// uint64 dwfullcount = 15;
inline void tagGameServer::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwfullcount)
  return dwfullcount_;
}
inline void tagGameServer::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwfullcount)
}

// string szserveraddr = 16;
inline void tagGameServer::clear_szserveraddr() {
  szserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameServer::szserveraddr() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szserveraddr)
  return szserveraddr_.GetNoArena();
}
inline void tagGameServer::set_szserveraddr(const ::std::string& value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szserveraddr)
}
#if LANG_CXX11
inline void tagGameServer::set_szserveraddr(::std::string&& value) {
  
  szserveraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szserveraddr)
}
#endif
inline void tagGameServer::set_szserveraddr(const char* value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szserveraddr)
}
inline void tagGameServer::set_szserveraddr(const char* value, size_t size) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szserveraddr)
}
inline ::std::string* tagGameServer::mutable_szserveraddr() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szserveraddr)
  return szserveraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameServer::release_szserveraddr() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szserveraddr)
  
  return szserveraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameServer::set_allocated_szserveraddr(::std::string* szserveraddr) {
  if (szserveraddr != NULL) {
    
  } else {
    
  }
  szserveraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szserveraddr);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szserveraddr)
}

// string szservername = 17;
inline void tagGameServer::clear_szservername() {
  szservername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameServer::szservername() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szservername)
  return szservername_.GetNoArena();
}
inline void tagGameServer::set_szservername(const ::std::string& value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szservername)
}
#if LANG_CXX11
inline void tagGameServer::set_szservername(::std::string&& value) {
  
  szservername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szservername)
}
#endif
inline void tagGameServer::set_szservername(const char* value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szservername)
}
inline void tagGameServer::set_szservername(const char* value, size_t size) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szservername)
}
inline ::std::string* tagGameServer::mutable_szservername() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szservername)
  return szservername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameServer::release_szservername() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szservername)
  
  return szservername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameServer::set_allocated_szservername(::std::string* szservername) {
  if (szservername != NULL) {
    
  } else {
    
  }
  szservername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szservername);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szservername)
}

// uint64 dwsurporttype = 18;
inline void tagGameServer::clear_dwsurporttype() {
  dwsurporttype_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwsurporttype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwsurporttype)
  return dwsurporttype_;
}
inline void tagGameServer::set_dwsurporttype(::google::protobuf::uint64 value) {
  
  dwsurporttype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwsurporttype)
}

// int32 wtablecount = 19;
inline void tagGameServer::clear_wtablecount() {
  wtablecount_ = 0;
}
inline ::google::protobuf::int32 tagGameServer::wtablecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wtablecount)
  return wtablecount_;
}
inline void tagGameServer::set_wtablecount(::google::protobuf::int32 value) {
  
  wtablecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wtablecount)
}

// uint64 dwsetplayercount = 20;
inline void tagGameServer::clear_dwsetplayercount() {
  dwsetplayercount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameServer::dwsetplayercount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwsetplayercount)
  return dwsetplayercount_;
}
inline void tagGameServer::set_dwsetplayercount(::google::protobuf::uint64 value) {
  
  dwsetplayercount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwsetplayercount)
}

// string szgameinfomation = 21;
inline void tagGameServer::clear_szgameinfomation() {
  szgameinfomation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameServer::szgameinfomation() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szgameinfomation)
  return szgameinfomation_.GetNoArena();
}
inline void tagGameServer::set_szgameinfomation(const ::std::string& value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szgameinfomation)
}
#if LANG_CXX11
inline void tagGameServer::set_szgameinfomation(::std::string&& value) {
  
  szgameinfomation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szgameinfomation)
}
#endif
inline void tagGameServer::set_szgameinfomation(const char* value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szgameinfomation)
}
inline void tagGameServer::set_szgameinfomation(const char* value, size_t size) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szgameinfomation)
}
inline ::std::string* tagGameServer::mutable_szgameinfomation() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szgameinfomation)
  return szgameinfomation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameServer::release_szgameinfomation() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szgameinfomation)
  
  return szgameinfomation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameServer::set_allocated_szgameinfomation(::std::string* szgameinfomation) {
  if (szgameinfomation != NULL) {
    
  } else {
    
  }
  szgameinfomation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szgameinfomation);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szgameinfomation)
}

// -------------------------------------------------------------------

// taggametype_s2c

// .NullPmd.response respcmd = 1;
inline bool taggametype_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void taggametype_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& taggametype_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* taggametype_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* taggametype_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void taggametype_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype_s2c.respcmd)
}

// repeated .GamePmd.taggametype taggametype = 3;
inline int taggametype_s2c::taggametype_size() const {
  return taggametype_.size();
}
inline void taggametype_s2c::clear_taggametype() {
  taggametype_.Clear();
}
inline const ::GamePmd::taggametype& taggametype_s2c::taggametype(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Get(index);
}
inline ::GamePmd::taggametype* taggametype_s2c::mutable_taggametype(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Mutable(index);
}
inline ::GamePmd::taggametype* taggametype_s2c::add_taggametype() {
  // @@protoc_insertion_point(field_add:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >*
taggametype_s2c::mutable_taggametype() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggametype_s2c.taggametype)
  return &taggametype_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >&
taggametype_s2c::taggametype() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggametype_s2c.taggametype)
  return taggametype_;
}

// -------------------------------------------------------------------

// taggamekind_s2c

// .NullPmd.response respcmd = 1;
inline bool taggamekind_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void taggamekind_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& taggamekind_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* taggamekind_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* taggamekind_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void taggamekind_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind_s2c.respcmd)
}

// repeated .GamePmd.taggamekind taggamekind = 2;
inline int taggamekind_s2c::taggamekind_size() const {
  return taggamekind_.size();
}
inline void taggamekind_s2c::clear_taggamekind() {
  taggamekind_.Clear();
}
inline const ::GamePmd::taggamekind& taggamekind_s2c::taggamekind(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Get(index);
}
inline ::GamePmd::taggamekind* taggamekind_s2c::mutable_taggamekind(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Mutable(index);
}
inline ::GamePmd::taggamekind* taggamekind_s2c::add_taggamekind() {
  // @@protoc_insertion_point(field_add:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >*
taggamekind_s2c::mutable_taggamekind() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggamekind_s2c.taggamekind)
  return &taggamekind_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >&
taggamekind_s2c::taggamekind() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_;
}

// -------------------------------------------------------------------

// tagGamePage_s2c

// .NullPmd.response respcmd = 1;
inline bool tagGamePage_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagGamePage_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagGamePage_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagGamePage_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagGamePage_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagGamePage_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage_s2c.respcmd)
}

// repeated .GamePmd.tagGamePage tagGamePage = 2;
inline int tagGamePage_s2c::taggamepage_size() const {
  return taggamepage_.size();
}
inline void tagGamePage_s2c::clear_taggamepage() {
  taggamepage_.Clear();
}
inline const ::GamePmd::tagGamePage& tagGamePage_s2c::taggamepage(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Get(index);
}
inline ::GamePmd::tagGamePage* tagGamePage_s2c::mutable_taggamepage(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Mutable(index);
}
inline ::GamePmd::tagGamePage* tagGamePage_s2c::add_taggamepage() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >*
tagGamePage_s2c::mutable_taggamepage() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return &taggamepage_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >&
tagGamePage_s2c::taggamepage() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_;
}

// -------------------------------------------------------------------

// tagGameNode_s2c

// .NullPmd.response respcmd = 1;
inline bool tagGameNode_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagGameNode_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagGameNode_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagGameNode_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagGameNode_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagGameNode_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode_s2c.respcmd)
}

// repeated .GamePmd.tagGameNode tagGameNode = 2;
inline int tagGameNode_s2c::taggamenode_size() const {
  return taggamenode_.size();
}
inline void tagGameNode_s2c::clear_taggamenode() {
  taggamenode_.Clear();
}
inline const ::GamePmd::tagGameNode& tagGameNode_s2c::taggamenode(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Get(index);
}
inline ::GamePmd::tagGameNode* tagGameNode_s2c::mutable_taggamenode(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Mutable(index);
}
inline ::GamePmd::tagGameNode* tagGameNode_s2c::add_taggamenode() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >*
tagGameNode_s2c::mutable_taggamenode() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return &taggamenode_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >&
tagGameNode_s2c::taggamenode() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_;
}

// -------------------------------------------------------------------

// tagGameServer_s2c

// .NullPmd.response respcmd = 1;
inline bool tagGameServer_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagGameServer_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagGameServer_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagGameServer_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagGameServer_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagGameServer_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer_s2c.respcmd)
}

// repeated .GamePmd.tagGameServer tagGameServer = 2;
inline int tagGameServer_s2c::taggameserver_size() const {
  return taggameserver_.size();
}
inline void tagGameServer_s2c::clear_taggameserver() {
  taggameserver_.Clear();
}
inline const ::GamePmd::tagGameServer& tagGameServer_s2c::taggameserver(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Get(index);
}
inline ::GamePmd::tagGameServer* tagGameServer_s2c::mutable_taggameserver(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Mutable(index);
}
inline ::GamePmd::tagGameServer* tagGameServer_s2c::add_taggameserver() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >*
tagGameServer_s2c::mutable_taggameserver() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return &taggameserver_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >&
tagGameServer_s2c::taggameserver() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_;
}

// -------------------------------------------------------------------

// personalParameter_c2s

// .NullPmd.response respcmd = 1;
inline bool personalParameter_c2s::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void personalParameter_c2s::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& personalParameter_c2s::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.personalParameter_c2s.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* personalParameter_c2s::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.personalParameter_c2s.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* personalParameter_c2s::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.personalParameter_c2s.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void personalParameter_c2s::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.personalParameter_c2s.respcmd)
}

// uint64 dwkindid = 2;
inline void personalParameter_c2s::clear_dwkindid() {
  dwkindid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 personalParameter_c2s::dwkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.personalParameter_c2s.dwkindid)
  return dwkindid_;
}
inline void personalParameter_c2s::set_dwkindid(::google::protobuf::uint64 value) {
  
  dwkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.personalParameter_c2s.dwkindid)
}

// -------------------------------------------------------------------

// tagPersonalTableFeeList

// uint64 dwdrawtimelimit = 1;
inline void tagPersonalTableFeeList::clear_dwdrawtimelimit() {
  dwdrawtimelimit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalTableFeeList::dwdrawtimelimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.dwdrawtimelimit)
  return dwdrawtimelimit_;
}
inline void tagPersonalTableFeeList::set_dwdrawtimelimit(::google::protobuf::uint64 value) {
  
  dwdrawtimelimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.dwdrawtimelimit)
}

// uint64 dwdrawcountlimit = 2;
inline void tagPersonalTableFeeList::clear_dwdrawcountlimit() {
  dwdrawcountlimit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalTableFeeList::dwdrawcountlimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.dwdrawcountlimit)
  return dwdrawcountlimit_;
}
inline void tagPersonalTableFeeList::set_dwdrawcountlimit(::google::protobuf::uint64 value) {
  
  dwdrawcountlimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.dwdrawcountlimit)
}

// uint64 liniscore = 3;
inline void tagPersonalTableFeeList::clear_liniscore() {
  liniscore_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalTableFeeList::liniscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.liniscore)
  return liniscore_;
}
inline void tagPersonalTableFeeList::set_liniscore(::google::protobuf::uint64 value) {
  
  liniscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.liniscore)
}

// uint64 lfeescore = 4;
inline void tagPersonalTableFeeList::clear_lfeescore() {
  lfeescore_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalTableFeeList::lfeescore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.lfeescore)
  return lfeescore_;
}
inline void tagPersonalTableFeeList::set_lfeescore(::google::protobuf::uint64 value) {
  
  lfeescore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.lfeescore)
}

// int32 waapayfee = 5;
inline void tagPersonalTableFeeList::clear_waapayfee() {
  waapayfee_ = 0;
}
inline ::google::protobuf::int32 tagPersonalTableFeeList::waapayfee() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.waapayfee)
  return waapayfee_;
}
inline void tagPersonalTableFeeList::set_waapayfee(::google::protobuf::int32 value) {
  
  waapayfee_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.waapayfee)
}

// int32 cbgamemode = 6;
inline void tagPersonalTableFeeList::clear_cbgamemode() {
  cbgamemode_ = 0;
}
inline ::google::protobuf::int32 tagPersonalTableFeeList::cbgamemode() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.cbgamemode)
  return cbgamemode_;
}
inline void tagPersonalTableFeeList::set_cbgamemode(::google::protobuf::int32 value) {
  
  cbgamemode_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.cbgamemode)
}

// -------------------------------------------------------------------

// tagPersonalTableFeeList_s2c

// .NullPmd.response respcmd = 1;
inline bool tagPersonalTableFeeList_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagPersonalTableFeeList_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagPersonalTableFeeList_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagPersonalTableFeeList_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagPersonalTableFeeList_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagPersonalTableFeeList_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
}

// repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
inline int tagPersonalTableFeeList_s2c::tagpersonaltablefeelist_size() const {
  return tagpersonaltablefeelist_.size();
}
inline void tagPersonalTableFeeList_s2c::clear_tagpersonaltablefeelist() {
  tagpersonaltablefeelist_.Clear();
}
inline const ::GamePmd::tagPersonalTableFeeList& tagPersonalTableFeeList_s2c::tagpersonaltablefeelist(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Get(index);
}
inline ::GamePmd::tagPersonalTableFeeList* tagPersonalTableFeeList_s2c::mutable_tagpersonaltablefeelist(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Mutable(index);
}
inline ::GamePmd::tagPersonalTableFeeList* tagPersonalTableFeeList_s2c::add_tagpersonaltablefeelist() {
  // @@protoc_insertion_point(field_add:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >*
tagPersonalTableFeeList_s2c::mutable_tagpersonaltablefeelist() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return &tagpersonaltablefeelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >&
tagPersonalTableFeeList_s2c::tagpersonaltablefeelist() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_;
}

// -------------------------------------------------------------------

// tagPersonalCellScore_s2c

// .NullPmd.response respcmd = 1;
inline bool tagPersonalCellScore_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagPersonalCellScore_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagPersonalCellScore_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalCellScore_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagPersonalCellScore_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalCellScore_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagPersonalCellScore_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalCellScore_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagPersonalCellScore_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalCellScore_s2c.respcmd)
}

// repeated int32 ncellscore = 2;
inline int tagPersonalCellScore_s2c::ncellscore_size() const {
  return ncellscore_.size();
}
inline void tagPersonalCellScore_s2c::clear_ncellscore() {
  ncellscore_.Clear();
}
inline ::google::protobuf::int32 tagPersonalCellScore_s2c::ncellscore(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return ncellscore_.Get(index);
}
inline void tagPersonalCellScore_s2c::set_ncellscore(int index, ::google::protobuf::int32 value) {
  ncellscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalCellScore_s2c.ncellscore)
}
inline void tagPersonalCellScore_s2c::add_ncellscore(::google::protobuf::int32 value) {
  ncellscore_.Add(value);
  // @@protoc_insertion_point(field_add:GamePmd.tagPersonalCellScore_s2c.ncellscore)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPersonalCellScore_s2c::ncellscore() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return ncellscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPersonalCellScore_s2c::mutable_ncellscore() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return &ncellscore_;
}

// -------------------------------------------------------------------

// tagGetPersonalRule_s2c

// .NullPmd.response respcmd = 1;
inline bool tagGetPersonalRule_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagGetPersonalRule_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagGetPersonalRule_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGetPersonalRule_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagGetPersonalRule_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGetPersonalRule_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagGetPersonalRule_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGetPersonalRule_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagGetPersonalRule_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGetPersonalRule_s2c.respcmd)
}

// string cbpersonalrule = 2;
inline void tagGetPersonalRule_s2c::clear_cbpersonalrule() {
  cbpersonalrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGetPersonalRule_s2c::cbpersonalrule() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  return cbpersonalrule_.GetNoArena();
}
inline void tagGetPersonalRule_s2c::set_cbpersonalrule(const ::std::string& value) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
#if LANG_CXX11
inline void tagGetPersonalRule_s2c::set_cbpersonalrule(::std::string&& value) {
  
  cbpersonalrule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
#endif
inline void tagGetPersonalRule_s2c::set_cbpersonalrule(const char* value) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
inline void tagGetPersonalRule_s2c::set_cbpersonalrule(const char* value, size_t size) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
inline ::std::string* tagGetPersonalRule_s2c::mutable_cbpersonalrule() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  return cbpersonalrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGetPersonalRule_s2c::release_cbpersonalrule() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  
  return cbpersonalrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGetPersonalRule_s2c::set_allocated_cbpersonalrule(::std::string* cbpersonalrule) {
  if (cbpersonalrule != NULL) {
    
  } else {
    
  }
  cbpersonalrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbpersonalrule);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}

// -------------------------------------------------------------------

// tagPersonalRoomOption_s2c

// .NullPmd.response respcmd = 1;
inline bool tagPersonalRoomOption_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagPersonalRoomOption_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagPersonalRoomOption_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagPersonalRoomOption_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagPersonalRoomOption_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagPersonalRoomOption_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalRoomOption_s2c.respcmd)
}

// int32 cbisjoingame = 2;
inline void tagPersonalRoomOption_s2c::clear_cbisjoingame() {
  cbisjoingame_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::cbisjoingame() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbisjoingame)
  return cbisjoingame_;
}
inline void tagPersonalRoomOption_s2c::set_cbisjoingame(::google::protobuf::int32 value) {
  
  cbisjoingame_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbisjoingame)
}

// int32 cbminpeople = 3;
inline void tagPersonalRoomOption_s2c::clear_cbminpeople() {
  cbminpeople_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::cbminpeople() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbminpeople)
  return cbminpeople_;
}
inline void tagPersonalRoomOption_s2c::set_cbminpeople(::google::protobuf::int32 value) {
  
  cbminpeople_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbminpeople)
}

// int32 cbmaxpeople = 4;
inline void tagPersonalRoomOption_s2c::clear_cbmaxpeople() {
  cbmaxpeople_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::cbmaxpeople() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbmaxpeople)
  return cbmaxpeople_;
}
inline void tagPersonalRoomOption_s2c::set_cbmaxpeople(::google::protobuf::int32 value) {
  
  cbmaxpeople_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbmaxpeople)
}

// uint64 lmaxcellscore = 5;
inline void tagPersonalRoomOption_s2c::clear_lmaxcellscore() {
  lmaxcellscore_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::lmaxcellscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.lmaxcellscore)
  return lmaxcellscore_;
}
inline void tagPersonalRoomOption_s2c::set_lmaxcellscore(::google::protobuf::uint64 value) {
  
  lmaxcellscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.lmaxcellscore)
}

// uint64 lpersonalroomtax = 6;
inline void tagPersonalRoomOption_s2c::clear_lpersonalroomtax() {
  lpersonalroomtax_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::lpersonalroomtax() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.lpersonalroomtax)
  return lpersonalroomtax_;
}
inline void tagPersonalRoomOption_s2c::set_lpersonalroomtax(::google::protobuf::uint64 value) {
  
  lpersonalroomtax_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.lpersonalroomtax)
}

// .CommonPmd.consumptionType bconsumptiontype = 7;
inline bool tagPersonalRoomOption_s2c::has_bconsumptiontype() const {
  return this != internal_default_instance() && bconsumptiontype_ != NULL;
}
inline void tagPersonalRoomOption_s2c::clear_bconsumptiontype() {
  if (GetArenaNoVirtual() == NULL && bconsumptiontype_ != NULL) delete bconsumptiontype_;
  bconsumptiontype_ = NULL;
}
inline const ::CommonPmd::consumptionType& tagPersonalRoomOption_s2c::bconsumptiontype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  return bconsumptiontype_ != NULL ? *bconsumptiontype_
                         : *::CommonPmd::consumptionType::internal_default_instance();
}
inline ::CommonPmd::consumptionType* tagPersonalRoomOption_s2c::mutable_bconsumptiontype() {
  
  if (bconsumptiontype_ == NULL) {
    bconsumptiontype_ = new ::CommonPmd::consumptionType;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  return bconsumptiontype_;
}
inline ::CommonPmd::consumptionType* tagPersonalRoomOption_s2c::release_bconsumptiontype() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  
  ::CommonPmd::consumptionType* temp = bconsumptiontype_;
  bconsumptiontype_ = NULL;
  return temp;
}
inline void tagPersonalRoomOption_s2c::set_allocated_bconsumptiontype(::CommonPmd::consumptionType* bconsumptiontype) {
  delete bconsumptiontype_;
  bconsumptiontype_ = bconsumptiontype;
  if (bconsumptiontype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
}

// int32 wcancreatecount = 8;
inline void tagPersonalRoomOption_s2c::clear_wcancreatecount() {
  wcancreatecount_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::wcancreatecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wcancreatecount)
  return wcancreatecount_;
}
inline void tagPersonalRoomOption_s2c::set_wcancreatecount(::google::protobuf::int32 value) {
  
  wcancreatecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wcancreatecount)
}

// uint64 dwplayturncount = 9;
inline void tagPersonalRoomOption_s2c::clear_dwplayturncount() {
  dwplayturncount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwplayturncount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwplayturncount)
  return dwplayturncount_;
}
inline void tagPersonalRoomOption_s2c::set_dwplayturncount(::google::protobuf::uint64 value) {
  
  dwplayturncount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwplayturncount)
}

// uint64 dwplaytimelimit = 10;
inline void tagPersonalRoomOption_s2c::clear_dwplaytimelimit() {
  dwplaytimelimit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwplaytimelimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwplaytimelimit)
  return dwplaytimelimit_;
}
inline void tagPersonalRoomOption_s2c::set_dwplaytimelimit(::google::protobuf::uint64 value) {
  
  dwplaytimelimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwplaytimelimit)
}

// uint64 dwtimeafterbegincount = 11;
inline void tagPersonalRoomOption_s2c::clear_dwtimeafterbegincount() {
  dwtimeafterbegincount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeafterbegincount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeafterbegincount)
  return dwtimeafterbegincount_;
}
inline void tagPersonalRoomOption_s2c::set_dwtimeafterbegincount(::google::protobuf::uint64 value) {
  
  dwtimeafterbegincount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeafterbegincount)
}

// uint64 dwtimeofflinecount = 12;
inline void tagPersonalRoomOption_s2c::clear_dwtimeofflinecount() {
  dwtimeofflinecount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeofflinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeofflinecount)
  return dwtimeofflinecount_;
}
inline void tagPersonalRoomOption_s2c::set_dwtimeofflinecount(::google::protobuf::uint64 value) {
  
  dwtimeofflinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeofflinecount)
}

// uint64 dwtimenotbegingame = 13;
inline void tagPersonalRoomOption_s2c::clear_dwtimenotbegingame() {
  dwtimenotbegingame_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimenotbegingame() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimenotbegingame)
  return dwtimenotbegingame_;
}
inline void tagPersonalRoomOption_s2c::set_dwtimenotbegingame(::google::protobuf::uint64 value) {
  
  dwtimenotbegingame_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimenotbegingame)
}

// uint64 dwtimeaftercreateroom = 14;
inline void tagPersonalRoomOption_s2c::clear_dwtimeaftercreateroom() {
  dwtimeaftercreateroom_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeaftercreateroom() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeaftercreateroom)
  return dwtimeaftercreateroom_;
}
inline void tagPersonalRoomOption_s2c::set_dwtimeaftercreateroom(::google::protobuf::uint64 value) {
  
  dwtimeaftercreateroom_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeaftercreateroom)
}

// int32 wbeginfreetime = 15;
inline void tagPersonalRoomOption_s2c::clear_wbeginfreetime() {
  wbeginfreetime_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::wbeginfreetime() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wbeginfreetime)
  return wbeginfreetime_;
}
inline void tagPersonalRoomOption_s2c::set_wbeginfreetime(::google::protobuf::int32 value) {
  
  wbeginfreetime_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wbeginfreetime)
}

// int32 wendfreetime = 16;
inline void tagPersonalRoomOption_s2c::clear_wendfreetime() {
  wendfreetime_ = 0;
}
inline ::google::protobuf::int32 tagPersonalRoomOption_s2c::wendfreetime() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wendfreetime)
  return wendfreetime_;
}
inline void tagPersonalRoomOption_s2c::set_wendfreetime(::google::protobuf::int32 value) {
  
  wendfreetime_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wendfreetime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace GamePmd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GamePmd_2eproto__INCLUDED
