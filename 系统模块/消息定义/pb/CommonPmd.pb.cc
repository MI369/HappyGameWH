// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonPmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonPmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlatPmd {
class CommonPmdCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonPmdCommand> {
} _CommonPmdCommand_default_instance_;
class common_personinfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<common_personinfo> {
} _common_personinfo_default_instance_;

namespace protobuf_CommonPmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPmdCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, wfaceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, dwuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, dwgameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, dwgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, dwcustomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, dwexperience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, lloveliness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, luserscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, luserinsure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, luseringot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, duserbeans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, cbgender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, cbmoormachine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, szaccounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, sznickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, szdynamicpass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, szgroupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, cbinsureenabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, cbshowserverstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_personinfo, cbisagent_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CommonPmdCommand)},
  { 4, -1, sizeof(common_personinfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonPmdCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_common_personinfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CommonPmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _CommonPmdCommand_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _common_personinfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CommonPmdCommand_default_instance_.DefaultConstruct();
  _common_personinfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017CommonPmd.proto\022\007PlatPmd\"W\n\020CommonPmdC"
      "ommand\"C\n\rCommonPmdEnum\022\025\n\021param_nullmes"
      "sage\020\000\022\033\n\027param_common_personinfo\020\001\"\260\003\n\021"
      "common_personinfo\022\017\n\007wfaceid\030\001 \001(\005\022\020\n\010dw"
      "userid\030\002 \001(\r\022\020\n\010dwgameid\030\003 \001(\r\022\021\n\tdwgrou"
      "pid\030\004 \001(\r\022\022\n\ndwcustomid\030\005 \001(\r\022\024\n\014dwexper"
      "ience\030\006 \001(\r\022\023\n\013lloveliness\030\007 \001(\004\022\022\n\nluse"
      "rscore\030\010 \001(\004\022\023\n\013luserinsure\030\t \001(\004\022\022\n\nlus"
      "eringot\030\n \001(\004\022\022\n\nduserbeans\030\013 \001(\001\022\020\n\010cbg"
      "ender\030\014 \001(\014\022\025\n\rcbmoormachine\030\r \001(\014\022\022\n\nsz"
      "accounts\030\016 \001(\t\022\022\n\nsznickname\030\017 \001(\t\022\025\n\rsz"
      "dynamicpass\030\020 \001(\t\022\023\n\013szgroupname\030\021 \001(\t\022\027"
      "\n\017cbinsureenabled\030\022 \001(\014\022\032\n\022cbshowservers"
      "tatus\030\023 \001(\014\022\021\n\tcbisagent\030\024 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 558);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonPmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CommonPmd_2eproto

const ::google::protobuf::EnumDescriptor* CommonPmdCommand_CommonPmdEnum_descriptor() {
  protobuf_CommonPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonPmd_2eproto::file_level_enum_descriptors[0];
}
bool CommonPmdCommand_CommonPmdEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonPmdCommand_CommonPmdEnum CommonPmdCommand::param_nullmessage;
const CommonPmdCommand_CommonPmdEnum CommonPmdCommand::param_common_personinfo;
const CommonPmdCommand_CommonPmdEnum CommonPmdCommand::CommonPmdEnum_MIN;
const CommonPmdCommand_CommonPmdEnum CommonPmdCommand::CommonPmdEnum_MAX;
const int CommonPmdCommand::CommonPmdEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonPmdCommand::CommonPmdCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlatPmd.CommonPmdCommand)
}
CommonPmdCommand::CommonPmdCommand(const CommonPmdCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlatPmd.CommonPmdCommand)
}

void CommonPmdCommand::SharedCtor() {
  _cached_size_ = 0;
}

CommonPmdCommand::~CommonPmdCommand() {
  // @@protoc_insertion_point(destructor:PlatPmd.CommonPmdCommand)
  SharedDtor();
}

void CommonPmdCommand::SharedDtor() {
}

void CommonPmdCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonPmdCommand::descriptor() {
  protobuf_CommonPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonPmd_2eproto::file_level_metadata[0].descriptor;
}

const CommonPmdCommand& CommonPmdCommand::default_instance() {
  protobuf_CommonPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonPmdCommand* CommonPmdCommand::New(::google::protobuf::Arena* arena) const {
  CommonPmdCommand* n = new CommonPmdCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonPmdCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:PlatPmd.CommonPmdCommand)
}

bool CommonPmdCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlatPmd.CommonPmdCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:PlatPmd.CommonPmdCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlatPmd.CommonPmdCommand)
  return false;
#undef DO_
}

void CommonPmdCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlatPmd.CommonPmdCommand)
  // @@protoc_insertion_point(serialize_end:PlatPmd.CommonPmdCommand)
}

::google::protobuf::uint8* CommonPmdCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlatPmd.CommonPmdCommand)
  // @@protoc_insertion_point(serialize_to_array_end:PlatPmd.CommonPmdCommand)
  return target;
}

size_t CommonPmdCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlatPmd.CommonPmdCommand)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonPmdCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlatPmd.CommonPmdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonPmdCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonPmdCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlatPmd.CommonPmdCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlatPmd.CommonPmdCommand)
    MergeFrom(*source);
  }
}

void CommonPmdCommand::MergeFrom(const CommonPmdCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlatPmd.CommonPmdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CommonPmdCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlatPmd.CommonPmdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPmdCommand::CopyFrom(const CommonPmdCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlatPmd.CommonPmdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPmdCommand::IsInitialized() const {
  return true;
}

void CommonPmdCommand::Swap(CommonPmdCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonPmdCommand::InternalSwap(CommonPmdCommand* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonPmdCommand::GetMetadata() const {
  protobuf_CommonPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonPmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonPmdCommand

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int common_personinfo::kWfaceidFieldNumber;
const int common_personinfo::kDwuseridFieldNumber;
const int common_personinfo::kDwgameidFieldNumber;
const int common_personinfo::kDwgroupidFieldNumber;
const int common_personinfo::kDwcustomidFieldNumber;
const int common_personinfo::kDwexperienceFieldNumber;
const int common_personinfo::kLlovelinessFieldNumber;
const int common_personinfo::kLuserscoreFieldNumber;
const int common_personinfo::kLuserinsureFieldNumber;
const int common_personinfo::kLuseringotFieldNumber;
const int common_personinfo::kDuserbeansFieldNumber;
const int common_personinfo::kCbgenderFieldNumber;
const int common_personinfo::kCbmoormachineFieldNumber;
const int common_personinfo::kSzaccountsFieldNumber;
const int common_personinfo::kSznicknameFieldNumber;
const int common_personinfo::kSzdynamicpassFieldNumber;
const int common_personinfo::kSzgroupnameFieldNumber;
const int common_personinfo::kCbinsureenabledFieldNumber;
const int common_personinfo::kCbshowserverstatusFieldNumber;
const int common_personinfo::kCbisagentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

common_personinfo::common_personinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlatPmd.common_personinfo)
}
common_personinfo::common_personinfo(const common_personinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cbgender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbgender().size() > 0) {
    cbgender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbgender_);
  }
  cbmoormachine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbmoormachine().size() > 0) {
    cbmoormachine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbmoormachine_);
  }
  szaccounts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szaccounts().size() > 0) {
    szaccounts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szaccounts_);
  }
  sznickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznickname().size() > 0) {
    sznickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznickname_);
  }
  szdynamicpass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdynamicpass().size() > 0) {
    szdynamicpass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdynamicpass_);
  }
  szgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szgroupname().size() > 0) {
    szgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgroupname_);
  }
  cbinsureenabled_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbinsureenabled().size() > 0) {
    cbinsureenabled_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbinsureenabled_);
  }
  cbshowserverstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbshowserverstatus().size() > 0) {
    cbshowserverstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbshowserverstatus_);
  }
  cbisagent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbisagent().size() > 0) {
    cbisagent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbisagent_);
  }
  ::memcpy(&wfaceid_, &from.wfaceid_,
    reinterpret_cast<char*>(&duserbeans_) -
    reinterpret_cast<char*>(&wfaceid_) + sizeof(duserbeans_));
  // @@protoc_insertion_point(copy_constructor:PlatPmd.common_personinfo)
}

void common_personinfo::SharedCtor() {
  cbgender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmoormachine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szdynamicpass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbinsureenabled_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbshowserverstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbisagent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wfaceid_, 0, reinterpret_cast<char*>(&duserbeans_) -
    reinterpret_cast<char*>(&wfaceid_) + sizeof(duserbeans_));
  _cached_size_ = 0;
}

common_personinfo::~common_personinfo() {
  // @@protoc_insertion_point(destructor:PlatPmd.common_personinfo)
  SharedDtor();
}

void common_personinfo::SharedDtor() {
  cbgender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmoormachine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szdynamicpass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgroupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbinsureenabled_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbshowserverstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbisagent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void common_personinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_personinfo::descriptor() {
  protobuf_CommonPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonPmd_2eproto::file_level_metadata[1].descriptor;
}

const common_personinfo& common_personinfo::default_instance() {
  protobuf_CommonPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

common_personinfo* common_personinfo::New(::google::protobuf::Arena* arena) const {
  common_personinfo* n = new common_personinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void common_personinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlatPmd.common_personinfo)
  cbgender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmoormachine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szdynamicpass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbinsureenabled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbshowserverstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbisagent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wfaceid_, 0, reinterpret_cast<char*>(&duserbeans_) -
    reinterpret_cast<char*>(&wfaceid_) + sizeof(duserbeans_));
}

bool common_personinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlatPmd.common_personinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wfaceid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wfaceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dwuserid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dwgameid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dwgroupid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dwcustomid = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwcustomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dwexperience = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwexperience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lloveliness = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lloveliness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 luserscore = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &luserscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 luserinsure = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &luserinsure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 luseringot = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &luseringot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double duserbeans = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duserbeans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbgender = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbgender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbmoormachine = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbmoormachine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szaccounts = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szaccounts().data(), this->szaccounts().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlatPmd.common_personinfo.szaccounts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sznickname = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlatPmd.common_personinfo.sznickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szdynamicpass = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdynamicpass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szdynamicpass().data(), this->szdynamicpass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlatPmd.common_personinfo.szdynamicpass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szgroupname = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szgroupname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szgroupname().data(), this->szgroupname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlatPmd.common_personinfo.szgroupname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbinsureenabled = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbinsureenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbshowserverstatus = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbshowserverstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbisagent = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbisagent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlatPmd.common_personinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlatPmd.common_personinfo)
  return false;
#undef DO_
}

void common_personinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlatPmd.common_personinfo)
  // int32 wfaceid = 1;
  if (this->wfaceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wfaceid(), output);
  }

  // uint32 dwuserid = 2;
  if (this->dwuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dwuserid(), output);
  }

  // uint32 dwgameid = 3;
  if (this->dwgameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dwgameid(), output);
  }

  // uint32 dwgroupid = 4;
  if (this->dwgroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwgroupid(), output);
  }

  // uint32 dwcustomid = 5;
  if (this->dwcustomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dwcustomid(), output);
  }

  // uint32 dwexperience = 6;
  if (this->dwexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dwexperience(), output);
  }

  // uint64 lloveliness = 7;
  if (this->lloveliness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lloveliness(), output);
  }

  // uint64 luserscore = 8;
  if (this->luserscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->luserscore(), output);
  }

  // uint64 luserinsure = 9;
  if (this->luserinsure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->luserinsure(), output);
  }

  // uint64 luseringot = 10;
  if (this->luseringot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->luseringot(), output);
  }

  // double duserbeans = 11;
  if (this->duserbeans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->duserbeans(), output);
  }

  // bytes cbgender = 12;
  if (this->cbgender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->cbgender(), output);
  }

  // bytes cbmoormachine = 13;
  if (this->cbmoormachine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->cbmoormachine(), output);
  }

  // string szaccounts = 14;
  if (this->szaccounts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szaccounts().data(), this->szaccounts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szaccounts");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->szaccounts(), output);
  }

  // string sznickname = 15;
  if (this->sznickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.sznickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->sznickname(), output);
  }

  // string szdynamicpass = 16;
  if (this->szdynamicpass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdynamicpass().data(), this->szdynamicpass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szdynamicpass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->szdynamicpass(), output);
  }

  // string szgroupname = 17;
  if (this->szgroupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgroupname().data(), this->szgroupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szgroupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->szgroupname(), output);
  }

  // bytes cbinsureenabled = 18;
  if (this->cbinsureenabled().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->cbinsureenabled(), output);
  }

  // bytes cbshowserverstatus = 19;
  if (this->cbshowserverstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->cbshowserverstatus(), output);
  }

  // bytes cbisagent = 20;
  if (this->cbisagent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->cbisagent(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlatPmd.common_personinfo)
}

::google::protobuf::uint8* common_personinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlatPmd.common_personinfo)
  // int32 wfaceid = 1;
  if (this->wfaceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wfaceid(), target);
  }

  // uint32 dwuserid = 2;
  if (this->dwuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dwuserid(), target);
  }

  // uint32 dwgameid = 3;
  if (this->dwgameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dwgameid(), target);
  }

  // uint32 dwgroupid = 4;
  if (this->dwgroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwgroupid(), target);
  }

  // uint32 dwcustomid = 5;
  if (this->dwcustomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dwcustomid(), target);
  }

  // uint32 dwexperience = 6;
  if (this->dwexperience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dwexperience(), target);
  }

  // uint64 lloveliness = 7;
  if (this->lloveliness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lloveliness(), target);
  }

  // uint64 luserscore = 8;
  if (this->luserscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->luserscore(), target);
  }

  // uint64 luserinsure = 9;
  if (this->luserinsure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->luserinsure(), target);
  }

  // uint64 luseringot = 10;
  if (this->luseringot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->luseringot(), target);
  }

  // double duserbeans = 11;
  if (this->duserbeans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->duserbeans(), target);
  }

  // bytes cbgender = 12;
  if (this->cbgender().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->cbgender(), target);
  }

  // bytes cbmoormachine = 13;
  if (this->cbmoormachine().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->cbmoormachine(), target);
  }

  // string szaccounts = 14;
  if (this->szaccounts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szaccounts().data(), this->szaccounts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szaccounts");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->szaccounts(), target);
  }

  // string sznickname = 15;
  if (this->sznickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.sznickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sznickname(), target);
  }

  // string szdynamicpass = 16;
  if (this->szdynamicpass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdynamicpass().data(), this->szdynamicpass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szdynamicpass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->szdynamicpass(), target);
  }

  // string szgroupname = 17;
  if (this->szgroupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgroupname().data(), this->szgroupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlatPmd.common_personinfo.szgroupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->szgroupname(), target);
  }

  // bytes cbinsureenabled = 18;
  if (this->cbinsureenabled().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->cbinsureenabled(), target);
  }

  // bytes cbshowserverstatus = 19;
  if (this->cbshowserverstatus().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->cbshowserverstatus(), target);
  }

  // bytes cbisagent = 20;
  if (this->cbisagent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->cbisagent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlatPmd.common_personinfo)
  return target;
}

size_t common_personinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlatPmd.common_personinfo)
  size_t total_size = 0;

  // bytes cbgender = 12;
  if (this->cbgender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbgender());
  }

  // bytes cbmoormachine = 13;
  if (this->cbmoormachine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbmoormachine());
  }

  // string szaccounts = 14;
  if (this->szaccounts().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szaccounts());
  }

  // string sznickname = 15;
  if (this->sznickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sznickname());
  }

  // string szdynamicpass = 16;
  if (this->szdynamicpass().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szdynamicpass());
  }

  // string szgroupname = 17;
  if (this->szgroupname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szgroupname());
  }

  // bytes cbinsureenabled = 18;
  if (this->cbinsureenabled().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbinsureenabled());
  }

  // bytes cbshowserverstatus = 19;
  if (this->cbshowserverstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbshowserverstatus());
  }

  // bytes cbisagent = 20;
  if (this->cbisagent().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbisagent());
  }

  // int32 wfaceid = 1;
  if (this->wfaceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wfaceid());
  }

  // uint32 dwuserid = 2;
  if (this->dwuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dwuserid());
  }

  // uint32 dwgameid = 3;
  if (this->dwgameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dwgameid());
  }

  // uint32 dwgroupid = 4;
  if (this->dwgroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dwgroupid());
  }

  // uint32 dwcustomid = 5;
  if (this->dwcustomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dwcustomid());
  }

  // uint32 dwexperience = 6;
  if (this->dwexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dwexperience());
  }

  // uint64 lloveliness = 7;
  if (this->lloveliness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lloveliness());
  }

  // uint64 luserscore = 8;
  if (this->luserscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->luserscore());
  }

  // uint64 luserinsure = 9;
  if (this->luserinsure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->luserinsure());
  }

  // uint64 luseringot = 10;
  if (this->luseringot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->luseringot());
  }

  // double duserbeans = 11;
  if (this->duserbeans() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_personinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlatPmd.common_personinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const common_personinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const common_personinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlatPmd.common_personinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlatPmd.common_personinfo)
    MergeFrom(*source);
  }
}

void common_personinfo::MergeFrom(const common_personinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlatPmd.common_personinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cbgender().size() > 0) {

    cbgender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbgender_);
  }
  if (from.cbmoormachine().size() > 0) {

    cbmoormachine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbmoormachine_);
  }
  if (from.szaccounts().size() > 0) {

    szaccounts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szaccounts_);
  }
  if (from.sznickname().size() > 0) {

    sznickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznickname_);
  }
  if (from.szdynamicpass().size() > 0) {

    szdynamicpass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdynamicpass_);
  }
  if (from.szgroupname().size() > 0) {

    szgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgroupname_);
  }
  if (from.cbinsureenabled().size() > 0) {

    cbinsureenabled_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbinsureenabled_);
  }
  if (from.cbshowserverstatus().size() > 0) {

    cbshowserverstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbshowserverstatus_);
  }
  if (from.cbisagent().size() > 0) {

    cbisagent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbisagent_);
  }
  if (from.wfaceid() != 0) {
    set_wfaceid(from.wfaceid());
  }
  if (from.dwuserid() != 0) {
    set_dwuserid(from.dwuserid());
  }
  if (from.dwgameid() != 0) {
    set_dwgameid(from.dwgameid());
  }
  if (from.dwgroupid() != 0) {
    set_dwgroupid(from.dwgroupid());
  }
  if (from.dwcustomid() != 0) {
    set_dwcustomid(from.dwcustomid());
  }
  if (from.dwexperience() != 0) {
    set_dwexperience(from.dwexperience());
  }
  if (from.lloveliness() != 0) {
    set_lloveliness(from.lloveliness());
  }
  if (from.luserscore() != 0) {
    set_luserscore(from.luserscore());
  }
  if (from.luserinsure() != 0) {
    set_luserinsure(from.luserinsure());
  }
  if (from.luseringot() != 0) {
    set_luseringot(from.luseringot());
  }
  if (from.duserbeans() != 0) {
    set_duserbeans(from.duserbeans());
  }
}

void common_personinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlatPmd.common_personinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_personinfo::CopyFrom(const common_personinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlatPmd.common_personinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_personinfo::IsInitialized() const {
  return true;
}

void common_personinfo::Swap(common_personinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void common_personinfo::InternalSwap(common_personinfo* other) {
  cbgender_.Swap(&other->cbgender_);
  cbmoormachine_.Swap(&other->cbmoormachine_);
  szaccounts_.Swap(&other->szaccounts_);
  sznickname_.Swap(&other->sznickname_);
  szdynamicpass_.Swap(&other->szdynamicpass_);
  szgroupname_.Swap(&other->szgroupname_);
  cbinsureenabled_.Swap(&other->cbinsureenabled_);
  cbshowserverstatus_.Swap(&other->cbshowserverstatus_);
  cbisagent_.Swap(&other->cbisagent_);
  std::swap(wfaceid_, other->wfaceid_);
  std::swap(dwuserid_, other->dwuserid_);
  std::swap(dwgameid_, other->dwgameid_);
  std::swap(dwgroupid_, other->dwgroupid_);
  std::swap(dwcustomid_, other->dwcustomid_);
  std::swap(dwexperience_, other->dwexperience_);
  std::swap(lloveliness_, other->lloveliness_);
  std::swap(luserscore_, other->luserscore_);
  std::swap(luserinsure_, other->luserinsure_);
  std::swap(luseringot_, other->luseringot_);
  std::swap(duserbeans_, other->duserbeans_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata common_personinfo::GetMetadata() const {
  protobuf_CommonPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonPmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// common_personinfo

// int32 wfaceid = 1;
void common_personinfo::clear_wfaceid() {
  wfaceid_ = 0;
}
::google::protobuf::int32 common_personinfo::wfaceid() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.wfaceid)
  return wfaceid_;
}
void common_personinfo::set_wfaceid(::google::protobuf::int32 value) {
  
  wfaceid_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.wfaceid)
}

// uint32 dwuserid = 2;
void common_personinfo::clear_dwuserid() {
  dwuserid_ = 0u;
}
::google::protobuf::uint32 common_personinfo::dwuserid() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.dwuserid)
  return dwuserid_;
}
void common_personinfo::set_dwuserid(::google::protobuf::uint32 value) {
  
  dwuserid_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.dwuserid)
}

// uint32 dwgameid = 3;
void common_personinfo::clear_dwgameid() {
  dwgameid_ = 0u;
}
::google::protobuf::uint32 common_personinfo::dwgameid() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.dwgameid)
  return dwgameid_;
}
void common_personinfo::set_dwgameid(::google::protobuf::uint32 value) {
  
  dwgameid_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.dwgameid)
}

// uint32 dwgroupid = 4;
void common_personinfo::clear_dwgroupid() {
  dwgroupid_ = 0u;
}
::google::protobuf::uint32 common_personinfo::dwgroupid() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.dwgroupid)
  return dwgroupid_;
}
void common_personinfo::set_dwgroupid(::google::protobuf::uint32 value) {
  
  dwgroupid_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.dwgroupid)
}

// uint32 dwcustomid = 5;
void common_personinfo::clear_dwcustomid() {
  dwcustomid_ = 0u;
}
::google::protobuf::uint32 common_personinfo::dwcustomid() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.dwcustomid)
  return dwcustomid_;
}
void common_personinfo::set_dwcustomid(::google::protobuf::uint32 value) {
  
  dwcustomid_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.dwcustomid)
}

// uint32 dwexperience = 6;
void common_personinfo::clear_dwexperience() {
  dwexperience_ = 0u;
}
::google::protobuf::uint32 common_personinfo::dwexperience() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.dwexperience)
  return dwexperience_;
}
void common_personinfo::set_dwexperience(::google::protobuf::uint32 value) {
  
  dwexperience_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.dwexperience)
}

// uint64 lloveliness = 7;
void common_personinfo::clear_lloveliness() {
  lloveliness_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 common_personinfo::lloveliness() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.lloveliness)
  return lloveliness_;
}
void common_personinfo::set_lloveliness(::google::protobuf::uint64 value) {
  
  lloveliness_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.lloveliness)
}

// uint64 luserscore = 8;
void common_personinfo::clear_luserscore() {
  luserscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 common_personinfo::luserscore() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.luserscore)
  return luserscore_;
}
void common_personinfo::set_luserscore(::google::protobuf::uint64 value) {
  
  luserscore_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.luserscore)
}

// uint64 luserinsure = 9;
void common_personinfo::clear_luserinsure() {
  luserinsure_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 common_personinfo::luserinsure() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.luserinsure)
  return luserinsure_;
}
void common_personinfo::set_luserinsure(::google::protobuf::uint64 value) {
  
  luserinsure_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.luserinsure)
}

// uint64 luseringot = 10;
void common_personinfo::clear_luseringot() {
  luseringot_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 common_personinfo::luseringot() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.luseringot)
  return luseringot_;
}
void common_personinfo::set_luseringot(::google::protobuf::uint64 value) {
  
  luseringot_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.luseringot)
}

// double duserbeans = 11;
void common_personinfo::clear_duserbeans() {
  duserbeans_ = 0;
}
double common_personinfo::duserbeans() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.duserbeans)
  return duserbeans_;
}
void common_personinfo::set_duserbeans(double value) {
  
  duserbeans_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.duserbeans)
}

// bytes cbgender = 12;
void common_personinfo::clear_cbgender() {
  cbgender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::cbgender() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.cbgender)
  return cbgender_.GetNoArena();
}
void common_personinfo::set_cbgender(const ::std::string& value) {
  
  cbgender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.cbgender)
}
#if LANG_CXX11
void common_personinfo::set_cbgender(::std::string&& value) {
  
  cbgender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.cbgender)
}
#endif
void common_personinfo::set_cbgender(const char* value) {
  
  cbgender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.cbgender)
}
void common_personinfo::set_cbgender(const void* value, size_t size) {
  
  cbgender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.cbgender)
}
::std::string* common_personinfo::mutable_cbgender() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.cbgender)
  return cbgender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_cbgender() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.cbgender)
  
  return cbgender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_cbgender(::std::string* cbgender) {
  if (cbgender != NULL) {
    
  } else {
    
  }
  cbgender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbgender);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.cbgender)
}

// bytes cbmoormachine = 13;
void common_personinfo::clear_cbmoormachine() {
  cbmoormachine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::cbmoormachine() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.cbmoormachine)
  return cbmoormachine_.GetNoArena();
}
void common_personinfo::set_cbmoormachine(const ::std::string& value) {
  
  cbmoormachine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.cbmoormachine)
}
#if LANG_CXX11
void common_personinfo::set_cbmoormachine(::std::string&& value) {
  
  cbmoormachine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.cbmoormachine)
}
#endif
void common_personinfo::set_cbmoormachine(const char* value) {
  
  cbmoormachine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.cbmoormachine)
}
void common_personinfo::set_cbmoormachine(const void* value, size_t size) {
  
  cbmoormachine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.cbmoormachine)
}
::std::string* common_personinfo::mutable_cbmoormachine() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.cbmoormachine)
  return cbmoormachine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_cbmoormachine() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.cbmoormachine)
  
  return cbmoormachine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_cbmoormachine(::std::string* cbmoormachine) {
  if (cbmoormachine != NULL) {
    
  } else {
    
  }
  cbmoormachine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbmoormachine);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.cbmoormachine)
}

// string szaccounts = 14;
void common_personinfo::clear_szaccounts() {
  szaccounts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::szaccounts() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.szaccounts)
  return szaccounts_.GetNoArena();
}
void common_personinfo::set_szaccounts(const ::std::string& value) {
  
  szaccounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.szaccounts)
}
#if LANG_CXX11
void common_personinfo::set_szaccounts(::std::string&& value) {
  
  szaccounts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.szaccounts)
}
#endif
void common_personinfo::set_szaccounts(const char* value) {
  
  szaccounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.szaccounts)
}
void common_personinfo::set_szaccounts(const char* value, size_t size) {
  
  szaccounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.szaccounts)
}
::std::string* common_personinfo::mutable_szaccounts() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.szaccounts)
  return szaccounts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_szaccounts() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.szaccounts)
  
  return szaccounts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_szaccounts(::std::string* szaccounts) {
  if (szaccounts != NULL) {
    
  } else {
    
  }
  szaccounts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szaccounts);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.szaccounts)
}

// string sznickname = 15;
void common_personinfo::clear_sznickname() {
  sznickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::sznickname() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.sznickname)
  return sznickname_.GetNoArena();
}
void common_personinfo::set_sznickname(const ::std::string& value) {
  
  sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.sznickname)
}
#if LANG_CXX11
void common_personinfo::set_sznickname(::std::string&& value) {
  
  sznickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.sznickname)
}
#endif
void common_personinfo::set_sznickname(const char* value) {
  
  sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.sznickname)
}
void common_personinfo::set_sznickname(const char* value, size_t size) {
  
  sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.sznickname)
}
::std::string* common_personinfo::mutable_sznickname() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.sznickname)
  return sznickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_sznickname() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.sznickname)
  
  return sznickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_sznickname(::std::string* sznickname) {
  if (sznickname != NULL) {
    
  } else {
    
  }
  sznickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznickname);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.sznickname)
}

// string szdynamicpass = 16;
void common_personinfo::clear_szdynamicpass() {
  szdynamicpass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::szdynamicpass() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.szdynamicpass)
  return szdynamicpass_.GetNoArena();
}
void common_personinfo::set_szdynamicpass(const ::std::string& value) {
  
  szdynamicpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.szdynamicpass)
}
#if LANG_CXX11
void common_personinfo::set_szdynamicpass(::std::string&& value) {
  
  szdynamicpass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.szdynamicpass)
}
#endif
void common_personinfo::set_szdynamicpass(const char* value) {
  
  szdynamicpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.szdynamicpass)
}
void common_personinfo::set_szdynamicpass(const char* value, size_t size) {
  
  szdynamicpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.szdynamicpass)
}
::std::string* common_personinfo::mutable_szdynamicpass() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.szdynamicpass)
  return szdynamicpass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_szdynamicpass() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.szdynamicpass)
  
  return szdynamicpass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_szdynamicpass(::std::string* szdynamicpass) {
  if (szdynamicpass != NULL) {
    
  } else {
    
  }
  szdynamicpass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdynamicpass);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.szdynamicpass)
}

// string szgroupname = 17;
void common_personinfo::clear_szgroupname() {
  szgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::szgroupname() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.szgroupname)
  return szgroupname_.GetNoArena();
}
void common_personinfo::set_szgroupname(const ::std::string& value) {
  
  szgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.szgroupname)
}
#if LANG_CXX11
void common_personinfo::set_szgroupname(::std::string&& value) {
  
  szgroupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.szgroupname)
}
#endif
void common_personinfo::set_szgroupname(const char* value) {
  
  szgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.szgroupname)
}
void common_personinfo::set_szgroupname(const char* value, size_t size) {
  
  szgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.szgroupname)
}
::std::string* common_personinfo::mutable_szgroupname() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.szgroupname)
  return szgroupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_szgroupname() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.szgroupname)
  
  return szgroupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_szgroupname(::std::string* szgroupname) {
  if (szgroupname != NULL) {
    
  } else {
    
  }
  szgroupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szgroupname);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.szgroupname)
}

// bytes cbinsureenabled = 18;
void common_personinfo::clear_cbinsureenabled() {
  cbinsureenabled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::cbinsureenabled() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.cbinsureenabled)
  return cbinsureenabled_.GetNoArena();
}
void common_personinfo::set_cbinsureenabled(const ::std::string& value) {
  
  cbinsureenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.cbinsureenabled)
}
#if LANG_CXX11
void common_personinfo::set_cbinsureenabled(::std::string&& value) {
  
  cbinsureenabled_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.cbinsureenabled)
}
#endif
void common_personinfo::set_cbinsureenabled(const char* value) {
  
  cbinsureenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.cbinsureenabled)
}
void common_personinfo::set_cbinsureenabled(const void* value, size_t size) {
  
  cbinsureenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.cbinsureenabled)
}
::std::string* common_personinfo::mutable_cbinsureenabled() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.cbinsureenabled)
  return cbinsureenabled_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_cbinsureenabled() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.cbinsureenabled)
  
  return cbinsureenabled_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_cbinsureenabled(::std::string* cbinsureenabled) {
  if (cbinsureenabled != NULL) {
    
  } else {
    
  }
  cbinsureenabled_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbinsureenabled);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.cbinsureenabled)
}

// bytes cbshowserverstatus = 19;
void common_personinfo::clear_cbshowserverstatus() {
  cbshowserverstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::cbshowserverstatus() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.cbshowserverstatus)
  return cbshowserverstatus_.GetNoArena();
}
void common_personinfo::set_cbshowserverstatus(const ::std::string& value) {
  
  cbshowserverstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.cbshowserverstatus)
}
#if LANG_CXX11
void common_personinfo::set_cbshowserverstatus(::std::string&& value) {
  
  cbshowserverstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.cbshowserverstatus)
}
#endif
void common_personinfo::set_cbshowserverstatus(const char* value) {
  
  cbshowserverstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.cbshowserverstatus)
}
void common_personinfo::set_cbshowserverstatus(const void* value, size_t size) {
  
  cbshowserverstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.cbshowserverstatus)
}
::std::string* common_personinfo::mutable_cbshowserverstatus() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.cbshowserverstatus)
  return cbshowserverstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_cbshowserverstatus() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.cbshowserverstatus)
  
  return cbshowserverstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_cbshowserverstatus(::std::string* cbshowserverstatus) {
  if (cbshowserverstatus != NULL) {
    
  } else {
    
  }
  cbshowserverstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbshowserverstatus);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.cbshowserverstatus)
}

// bytes cbisagent = 20;
void common_personinfo::clear_cbisagent() {
  cbisagent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& common_personinfo::cbisagent() const {
  // @@protoc_insertion_point(field_get:PlatPmd.common_personinfo.cbisagent)
  return cbisagent_.GetNoArena();
}
void common_personinfo::set_cbisagent(const ::std::string& value) {
  
  cbisagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.common_personinfo.cbisagent)
}
#if LANG_CXX11
void common_personinfo::set_cbisagent(::std::string&& value) {
  
  cbisagent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.common_personinfo.cbisagent)
}
#endif
void common_personinfo::set_cbisagent(const char* value) {
  
  cbisagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.common_personinfo.cbisagent)
}
void common_personinfo::set_cbisagent(const void* value, size_t size) {
  
  cbisagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.common_personinfo.cbisagent)
}
::std::string* common_personinfo::mutable_cbisagent() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.common_personinfo.cbisagent)
  return cbisagent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_personinfo::release_cbisagent() {
  // @@protoc_insertion_point(field_release:PlatPmd.common_personinfo.cbisagent)
  
  return cbisagent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_personinfo::set_allocated_cbisagent(::std::string* cbisagent) {
  if (cbisagent != NULL) {
    
  } else {
    
  }
  cbisagent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbisagent);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.common_personinfo.cbisagent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PlatPmd

// @@protoc_insertion_point(global_scope)
