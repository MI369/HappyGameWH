/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.NullPmd.command', null, global);
goog.exportSymbol('proto.NullPmd.head', null, global);
goog.exportSymbol('proto.NullPmd.indication', null, global);
goog.exportSymbol('proto.NullPmd.info', null, global);
goog.exportSymbol('proto.NullPmd.message', null, global);
goog.exportSymbol('proto.NullPmd.request', null, global);
goog.exportSymbol('proto.NullPmd.response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.request.displayName = 'proto.NullPmd.request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.request.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.request}
 */
proto.NullPmd.request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.request;
  return proto.NullPmd.request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.request}
 */
proto.NullPmd.request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.response.displayName = 'proto.NullPmd.response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.response.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.response.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errordescription: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.response}
 */
proto.NullPmd.response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.response;
  return proto.NullPmd.response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.response}
 */
proto.NullPmd.response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrordescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrordescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.NullPmd.response.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NullPmd.response.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string errordescription = 2;
 * @return {string}
 */
proto.NullPmd.response.prototype.getErrordescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NullPmd.response.prototype.setErrordescription = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.indication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.indication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.indication.displayName = 'proto.NullPmd.indication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.indication.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.indication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.indication} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.indication.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.indication}
 */
proto.NullPmd.indication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.indication;
  return proto.NullPmd.indication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.indication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.indication}
 */
proto.NullPmd.indication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.indication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.indication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.indication} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.indication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.command.displayName = 'proto.NullPmd.command';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.command.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.command} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.command.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.command}
 */
proto.NullPmd.command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.command;
  return proto.NullPmd.command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.command}
 */
proto.NullPmd.command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMainid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.command} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 mainid = 1;
 * @return {number}
 */
proto.NullPmd.command.prototype.getMainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NullPmd.command.prototype.setMainid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 subid = 2;
 * @return {number}
 */
proto.NullPmd.command.prototype.getSubid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NullPmd.command.prototype.setSubid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.info.displayName = 'proto.NullPmd.info';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.info.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.info} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.info.toObject = function(includeInstance, msg) {
  var f, obj = {
    cbdatakind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cbcheckcode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wpacketsize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.info}
 */
proto.NullPmd.info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.info;
  return proto.NullPmd.info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.info}
 */
proto.NullPmd.info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCbdatakind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCbcheckcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWpacketsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.info} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCbdatakind();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCbcheckcode();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWpacketsize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 cbdatakind = 1;
 * @return {number}
 */
proto.NullPmd.info.prototype.getCbdatakind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NullPmd.info.prototype.setCbdatakind = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 cbcheckcode = 2;
 * @return {number}
 */
proto.NullPmd.info.prototype.getCbcheckcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NullPmd.info.prototype.setCbcheckcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 wpacketsize = 3;
 * @return {number}
 */
proto.NullPmd.info.prototype.getWpacketsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NullPmd.info.prototype.setWpacketsize = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.head = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.head, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.head.displayName = 'proto.NullPmd.head';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.head.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.head.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.head} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.head.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = msg.getCommand()) && proto.NullPmd.command.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.NullPmd.info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.head}
 */
proto.NullPmd.head.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.head;
  return proto.NullPmd.head.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.head} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.head}
 */
proto.NullPmd.head.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NullPmd.command;
      reader.readMessage(value,proto.NullPmd.command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.NullPmd.info;
      reader.readMessage(value,proto.NullPmd.info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.head.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.head.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.head} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.head.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NullPmd.command.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NullPmd.info.serializeBinaryToWriter
    );
  }
};


/**
 * optional command command = 1;
 * @return {?proto.NullPmd.command}
 */
proto.NullPmd.head.prototype.getCommand = function() {
  return /** @type{?proto.NullPmd.command} */ (
    jspb.Message.getWrapperField(this, proto.NullPmd.command, 1));
};


/** @param {?proto.NullPmd.command|undefined} value */
proto.NullPmd.head.prototype.setCommand = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NullPmd.head.prototype.clearCommand = function() {
  this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NullPmd.head.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional info info = 2;
 * @return {?proto.NullPmd.info}
 */
proto.NullPmd.head.prototype.getInfo = function() {
  return /** @type{?proto.NullPmd.info} */ (
    jspb.Message.getWrapperField(this, proto.NullPmd.info, 2));
};


/** @param {?proto.NullPmd.info|undefined} value */
proto.NullPmd.head.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NullPmd.head.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NullPmd.head.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullPmd.message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullPmd.message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullPmd.message.displayName = 'proto.NullPmd.message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullPmd.message.prototype.toObject = function(opt_includeInstance) {
  return proto.NullPmd.message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullPmd.message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NullPmd.message.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.NullPmd.head.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullPmd.message}
 */
proto.NullPmd.message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullPmd.message;
  return proto.NullPmd.message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullPmd.message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullPmd.message}
 */
proto.NullPmd.message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NullPmd.head;
      reader.readMessage(value,proto.NullPmd.head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullPmd.message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullPmd.message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullPmd.message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NullPmd.message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NullPmd.head.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional head head = 1;
 * @return {?proto.NullPmd.head}
 */
proto.NullPmd.message.prototype.getHead = function() {
  return /** @type{?proto.NullPmd.head} */ (
    jspb.Message.getWrapperField(this, proto.NullPmd.head, 1));
};


/** @param {?proto.NullPmd.head|undefined} value */
proto.NullPmd.message.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NullPmd.message.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NullPmd.message.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.NullPmd.message.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.NullPmd.message.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.NullPmd.message.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.NullPmd.message.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.NullPmd);
